
FreeRTOSDemoNK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000babc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800bc4c  0800bc4c  0001bc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcd0  0800bcd0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd8  0800bcd8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcdc  0800bcdc  0001bcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004ab0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b30  20004b30  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023302  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000541f  00000000  00000000  000433f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c88  00000000  00000000  00048818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015ff  00000000  00000000  0004a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026ea7  00000000  00000000  0004ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002556f  00000000  00000000  00072946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd20d  00000000  00000000  00097eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b6c  00000000  00000000  001750c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0017cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc34 	.word	0x0800bc34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800bc34 	.word	0x0800bc34

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000009c 	.word	0x2000009c
 80004fc:	2000013c 	.word	0x2000013c

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fcdd 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f823 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f943 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000512:	f000 f889 	bl	8000628 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000516:	f000 f8b5 	bl	8000684 <MX_I2S3_Init>
  MX_SPI1_Init();
 800051a:	f000 f8e3 	bl	80006e4 <MX_SPI1_Init>
  MX_TIM11_Init();
 800051e:	f000 f917 	bl	8000750 <MX_TIM11_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x4c>)
 8000524:	1d3c      	adds	r4, r7, #4
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f008 fc62 	bl	8008e02 <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <main+0x50>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f008 fc56 	bl	8008df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x48>
 800054a:	bf00      	nop
 800054c:	0800bc58 	.word	0x0800bc58
 8000550:	20000478 	.word	0x20000478

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00b fa72 	bl	800ba4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fe6e 	bl	80042bc <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 f9f1 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f004 f8cf 	bl	80047ac <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f9da 	bl	80009cc <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_I2C1_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x50>)
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_I2C1_Init+0x58>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_I2C1_Init+0x50>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_I2C1_Init+0x50>)
 8000666:	f003 f845 	bl	80036f4 <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f9ac 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000033c 	.word	0x2000033c
 800067c:	40005400 	.word	0x40005400
 8000680:	000186a0 	.word	0x000186a0

08000684 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2S3_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_I2S3_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <MX_I2S3_Init+0x5c>)
 80006ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006c4:	f003 f95a 	bl	800397c <HAL_I2S_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ce:	f000 f97d 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000390 	.word	0x20000390
 80006dc:	40003c00 	.word	0x40003c00
 80006e0:	00017700 	.word	0x00017700

080006e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_SPI1_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_SPI1_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI1_Init+0x64>)
 8000730:	220a      	movs	r2, #10
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_SPI1_Init+0x64>)
 8000736:	f004 fbb9 	bl	8004eac <HAL_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f944 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200003d8 	.word	0x200003d8
 800074c:	40013000 	.word	0x40013000

08000750 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_TIM11_Init+0x40>)
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_TIM11_Init+0x44>)
 8000758:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_TIM11_Init+0x40>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_TIM11_Init+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_TIM11_Init+0x40>)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_TIM11_Init+0x40>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_TIM11_Init+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM11_Init+0x40>)
 800077c:	f004 fc1f 	bl	8004fbe <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000786:	f000 f921 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000430 	.word	0x20000430
 8000794:	40014800 	.word	0x40014800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a71      	ldr	r2, [pc, #452]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b6f      	ldr	r3, [pc, #444]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b6b      	ldr	r3, [pc, #428]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a6a      	ldr	r2, [pc, #424]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b68      	ldr	r3, [pc, #416]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a5c      	ldr	r2, [pc, #368]	; (800097c <MX_GPIO_Init+0x1e4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b5a      	ldr	r3, [pc, #360]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b56      	ldr	r3, [pc, #344]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a55      	ldr	r2, [pc, #340]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b4f      	ldr	r3, [pc, #316]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a4e      	ldr	r2, [pc, #312]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4849      	ldr	r0, [pc, #292]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800085c:	f000 fe16 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4847      	ldr	r0, [pc, #284]	; (8000984 <MX_GPIO_Init+0x1ec>)
 8000866:	f000 fe11 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4845      	ldr	r0, [pc, #276]	; (8000988 <MX_GPIO_Init+0x1f0>)
 8000872:	f000 fe0b 	bl	800148c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	483c      	ldr	r0, [pc, #240]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800088e:	f000 fc61 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4836      	ldr	r0, [pc, #216]	; (8000984 <MX_GPIO_Init+0x1ec>)
 80008aa:	f000 fc53 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	482e      	ldr	r0, [pc, #184]	; (8000984 <MX_GPIO_Init+0x1ec>)
 80008ca:	f000 fc43 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	482a      	ldr	r0, [pc, #168]	; (800098c <MX_GPIO_Init+0x1f4>)
 80008e4:	f000 fc36 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4825      	ldr	r0, [pc, #148]	; (8000990 <MX_GPIO_Init+0x1f8>)
 80008fc:	f000 fc2a 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	; (8000990 <MX_GPIO_Init+0x1f8>)
 800091e:	f000 fc19 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000926:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_GPIO_Init+0x1f0>)
 800093c:	f000 fc0a 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_GPIO_Init+0x1f0>)
 8000954:	f000 fbfe 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800096e:	f000 fbf1 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400

08000994 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800099c:	f00a fc96 	bl	800b2cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f008 fa7a 	bl	8008e9a <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartDefaultTask+0xc>

080009a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d101      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ba:	f000 faa5 	bl	8000f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40001000 	.word	0x40001000

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x54>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_MspInit+0x54>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_MspInit+0x54>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_MspInit+0x54>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 fb6f 	bl	8001100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12c      	bne.n	8000aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8c:	f000 fb62 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a31      	ldr	r2, [pc, #196]	; (8000bb0 <HAL_I2S_MspInit+0xf0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d15a      	bne.n	8000ba6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000af4:	23c0      	movs	r3, #192	; 0xc0
 8000af6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f891 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b0c:	f7ff ff5e 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b64:	2310      	movs	r3, #16
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b74:	2306      	movs	r3, #6
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <HAL_I2S_MspInit+0xf8>)
 8000b80:	f000 fae8 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b96:	2306      	movs	r3, #6
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_I2S_MspInit+0xfc>)
 8000ba2:	f000 fad7 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	; 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40003c00 	.word	0x40003c00
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_SPI_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c1a:	23e0      	movs	r3, #224	; 0xe0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_SPI_MspInit+0x8c>)
 8000c36:	f000 fa8d 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10d      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x40>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <HAL_TIM_Base_MspInit+0x40>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <HAL_TIM_Base_MspInit+0x40>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40014800 	.word	0x40014800
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_InitTick+0xe4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <HAL_InitTick+0xe4>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_InitTick+0xe4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 ff7a 	bl	8004bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cda:	f003 ff5f 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8000cde:	6378      	str	r0, [r7, #52]	; 0x34
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce2:	f003 ff5b 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <HAL_InitTick+0xe8>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_InitTick+0xec>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_InitTick+0xf0>)
 8000cfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_InitTick+0xec>)
 8000d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d08:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <HAL_InitTick+0xec>)
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_InitTick+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_InitTick+0xec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_InitTick+0xec>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <HAL_InitTick+0xec>)
 8000d22:	f004 f94c 	bl	8004fbe <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11b      	bne.n	8000d6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <HAL_InitTick+0xec>)
 8000d36:	f004 f991 	bl	800505c <HAL_TIM_Base_Start_IT>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d111      	bne.n	8000d6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d48:	2036      	movs	r0, #54	; 0x36
 8000d4a:	f000 f9f5 	bl	8001138 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d808      	bhi.n	8000d66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2036      	movs	r0, #54	; 0x36
 8000d5a:	f000 f9d1 	bl	8001100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_InitTick+0xf4>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e002      	b.n	8000d6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	2000047c 	.word	0x2000047c
 8000d84:	40001000 	.word	0x40001000
 8000d88:	20000004 	.word	0x20000004

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM6_DAC_IRQHandler+0x10>)
 8000dbe:	f004 f9bd 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000047c 	.word	0x2000047c

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fe55 	bl	8001a80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20004608 	.word	0x20004608

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f00a fe8a 	bl	800bb28 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200004c4 	.word	0x200004c4
 8000e48:	20004b30 	.word	0x20004b30

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f00a fe49 	bl	800bb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb2d 	bl	8000500 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000eb4:	0800bce0 	.word	0x0800bce0
  ldr r2, =_sbss
 8000eb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ebc:	20004b30 	.word	0x20004b30

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f8fc 	bl	80010ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f7ff fece 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fd6e 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200004c8 	.word	0x200004c8

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200004c8 	.word	0x200004c8

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff4c 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001112:	f7ff ff61 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f7ff ffb1 	bl	8001084 <NVIC_EncodePriority>
 8001122:	4602      	mov	r2, r0
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff80 	bl	8001030 <__NVIC_SetPriority>
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff54 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e16b      	b.n	8001448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 815a 	bne.w	8001442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d005      	beq.n	80011a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d130      	bne.n	8001208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d017      	beq.n	8001244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80b4 	beq.w	8001442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_GPIO_Init+0x310>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x324>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x328>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x32c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x330>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x20a>
 800135a:	2307      	movs	r3, #7
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x228>
 800135e:	2308      	movs	r3, #8
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x228>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x310>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_GPIO_Init+0x334>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x334>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x334>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_GPIO_Init+0x334>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae90 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af02      	add	r7, sp, #8
 80014c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e059      	b.n	8001584 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f009 ff42 	bl	800b374 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fe:	d102      	bne.n	8001506 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f863 	bl	80055d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7c1a      	ldrb	r2, [r3, #16]
 8001518:	f88d 2000 	strb.w	r2, [sp]
 800151c:	3304      	adds	r3, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	f003 ffe4 	bl	80054ec <USB_CoreInit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e026      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f004 f85b 	bl	80055f8 <USB_SetCurrentMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e017      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7c1a      	ldrb	r2, [r3, #16]
 800155c:	f88d 2000 	strb.w	r2, [sp]
 8001560:	3304      	adds	r3, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	f004 f9fe 	bl	8005964 <USB_HostInit>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e004      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af04      	add	r7, sp, #16
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	460b      	mov	r3, r1
 80015a0:	70bb      	strb	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_HCD_HC_Init+0x2c>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e09d      	b.n	80016f4 <HAL_HCD_HC_Init+0x168>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3319      	adds	r3, #25
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3314      	adds	r3, #20
 80015e4:	787a      	ldrb	r2, [r7, #1]
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3315      	adds	r3, #21
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3326      	adds	r3, #38	; 0x26
 800160c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001610:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	78bb      	ldrb	r3, [r7, #2]
 8001616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161a:	b2d8      	uxtb	r0, r3
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3316      	adds	r3, #22
 800162a:	4602      	mov	r2, r0
 800162c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fbc8 	bl	8001dc8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da0a      	bge.n	8001656 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3317      	adds	r3, #23
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e009      	b.n	800166a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3317      	adds	r3, #23
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fadc 	bl	8005c2c <USB_GetHostSpeed>
 8001674:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001676:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10b      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800167e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d104      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2bbc      	cmp	r3, #188	; 0xbc
 8001690:	d901      	bls.n	8001696 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001692:	23bc      	movs	r3, #188	; 0xbc
 8001694:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3318      	adds	r3, #24
 80016a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	b298      	uxth	r0, r3
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3328      	adds	r3, #40	; 0x28
 80016c0:	4602      	mov	r2, r0
 80016c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	787c      	ldrb	r4, [r7, #1]
 80016ce:	78ba      	ldrb	r2, [r7, #2]
 80016d0:	78f9      	ldrb	r1, [r7, #3]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f004 facb 	bl	8005c7c <USB_HC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_HCD_HC_Halt+0x1e>
 8001716:	2302      	movs	r3, #2
 8001718:	e00f      	b.n	800173a <HAL_HCD_HC_Halt+0x3e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fe5d 	bl	80063ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	460b      	mov	r3, r1
 8001758:	70bb      	strb	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	3317      	adds	r3, #23
 800176e:	78ba      	ldrb	r2, [r7, #2]
 8001770:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3326      	adds	r3, #38	; 0x26
 8001782:	787a      	ldrb	r2, [r7, #1]
 8001784:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001786:	7c3b      	ldrb	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d114      	bne.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	332a      	adds	r3, #42	; 0x2a
 800179c:	2203      	movs	r2, #3
 800179e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3319      	adds	r3, #25
 80017b0:	7f3a      	ldrb	r2, [r7, #28]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e009      	b.n	80017ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	332a      	adds	r3, #42	; 0x2a
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	f200 8102 	bhi.w	80019d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080019c1 	.word	0x080019c1
 80017e0:	080018ad 	.word	0x080018ad
 80017e4:	08001937 	.word	0x08001937
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017e8:	7c3b      	ldrb	r3, [r7, #16]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	f040 80f5 	bne.w	80019da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d12d      	bne.n	8001852 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017f6:	8b3b      	ldrh	r3, [r7, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333d      	adds	r3, #61	; 0x3d
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	333d      	adds	r3, #61	; 0x3d
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	332a      	adds	r3, #42	; 0x2a
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800183a:	e0ce      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	332a      	adds	r3, #42	; 0x2a
 800184c:	2202      	movs	r2, #2
 800184e:	701a      	strb	r2, [r3, #0]
      break;
 8001850:	e0c3      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	331a      	adds	r3, #26
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 80b8 	bne.w	80019da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	333c      	adds	r3, #60	; 0x3c
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	332a      	adds	r3, #42	; 0x2a
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e0a1      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	332a      	adds	r3, #42	; 0x2a
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e096      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018ac:	78bb      	ldrb	r3, [r7, #2]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d120      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	333d      	adds	r3, #61	; 0x3d
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	332a      	adds	r3, #42	; 0x2a
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018dc:	e07e      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332a      	adds	r3, #42	; 0x2a
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e073      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	333c      	adds	r3, #60	; 0x3c
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	332a      	adds	r3, #42	; 0x2a
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e05d      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	; 0x2a
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e052      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d120      	bne.n	800197e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	333d      	adds	r3, #61	; 0x3d
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	332a      	adds	r3, #42	; 0x2a
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001966:	e039      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	332a      	adds	r3, #42	; 0x2a
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      break;
 800197c:	e02e      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	333c      	adds	r3, #60	; 0x3c
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	332a      	adds	r3, #42	; 0x2a
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
      break;
 80019a8:	e018      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	332a      	adds	r3, #42	; 0x2a
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
      break;
 80019be:	e00d      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	332a      	adds	r3, #42	; 0x2a
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
      break;
 80019d4:	e002      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019d6:	bf00      	nop
 80019d8:	e000      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	332c      	adds	r3, #44	; 0x2c
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	8b39      	ldrh	r1, [r7, #24]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4403      	add	r3, r0
 8001a00:	3334      	adds	r3, #52	; 0x34
 8001a02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	334c      	adds	r3, #76	; 0x4c
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3338      	adds	r3, #56	; 0x38
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	334d      	adds	r3, #77	; 0x4d
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3310      	adds	r3, #16
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	1d19      	adds	r1, r3, #4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f004 fa30 	bl	8005ed4 <USB_HC_StartXfer>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop

08001a80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 ff24 	bl	80058e4 <USB_GetMode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80fb 	bne.w	8001c9a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fee7 	bl	800587c <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80f1 	beq.w	8001c98 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fede 	bl	800587c <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aca:	d104      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fece 	bl	800587c <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aea:	d104      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 febe 	bl	800587c <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b0a:	d104      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 feae 	bl	800587c <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d103      	bne.n	8001b32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fea0 	bl	800587c <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b46:	d120      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d113      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b62:	2110      	movs	r1, #16
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f003 fd93 	bl	8005690 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	f003 fdc2 	bl	80056f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7a5b      	ldrb	r3, [r3, #9]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d105      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 ffb4 	bl	8005aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f009 fc73 	bl	800b470 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fe74 	bl	800587c <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9e:	d102      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f001 fd33 	bl	800360c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fe66 	bl	800587c <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d106      	bne.n	8001bc8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f009 fc3c 	bl	800b438 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fe55 	bl	800587c <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bdc:	d139      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 fbf0 	bl	80063c8 <USB_HC_ReadInterrupt>
 8001be8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e025      	b.n	8001c3c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1a:	d106      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f905 	bl	8001e32 <HCD_HC_IN_IRQHandler>
 8001c28:	e005      	b.n	8001c36 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 ff67 	bl	8002b04 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795b      	ldrb	r3, [r3, #5]
 8001c40:	461a      	mov	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3d3      	bcc.n	8001bf0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fe10 	bl	800587c <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d101      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x1ea>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1ec>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0210 	bic.w	r2, r2, #16
 8001c7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fbe4 	bl	800344e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0210 	orr.w	r2, r2, #16
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	e000      	b.n	8001c9a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c98:	bf00      	nop
    }
  }
}
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_Start+0x16>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_HCD_Start+0x3e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 ff78 	bl	8005bba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fc70 	bl	80055b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_HCD_Stop+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e00d      	b.n	8001d18 <HAL_HCD_Stop+0x32>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 fccb 	bl	80066a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 ff1a 	bl	8005b66 <USB_ResetPort>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	334c      	adds	r3, #76	; 0x4c
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3338      	adds	r3, #56	; 0x38
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 ff5c 	bl	8005c5a <USB_GetCurrentFrame>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ff37 	bl	8005c2c <USB_GetHostSpeed>
 8001dbe:	4603      	mov	r3, r0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	331a      	adds	r3, #26
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	331b      	adds	r3, #27
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3325      	adds	r3, #37	; 0x25
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3324      	adds	r3, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fd26 	bl	80058a2 <USB_ReadChInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11a      	bne.n	8001e96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2304      	movs	r3, #4
 8001e70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	334d      	adds	r3, #77	; 0x4d
 8001e82:	2207      	movs	r2, #7
 8001e84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 faab 	bl	80063ea <USB_HC_Halt>
 8001e94:	e09e      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fcff 	bl	80058a2 <USB_ReadChInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eae:	d11b      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	334d      	adds	r3, #77	; 0x4d
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fa82 	bl	80063ea <USB_HC_Halt>
 8001ee6:	e075      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fcd6 	bl	80058a2 <USB_ReadChInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d11a      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2308      	movs	r3, #8
 8001f10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	334d      	adds	r3, #77	; 0x4d
 8001f22:	2206      	movs	r2, #6
 8001f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fa5b 	bl	80063ea <USB_HC_Halt>
 8001f34:	e04e      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fcaf 	bl	80058a2 <USB_ReadChInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d11b      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	334d      	adds	r3, #77	; 0x4d
 8001f74:	2209      	movs	r2, #9
 8001f76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fa32 	bl	80063ea <USB_HC_Halt>
 8001f86:	e025      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fc86 	bl	80058a2 <USB_ReadChInterrupts>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d119      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334d      	adds	r3, #77	; 0x4d
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fa0b 	bl	80063ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fc60 	bl	80058a2 <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fec:	d112      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f9f7 	bl	80063ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	f000 bd75 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fc40 	bl	80058a2 <USB_ReadChInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	f040 8128 	bne.w	800227e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331b      	adds	r3, #27
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d119      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	331b      	adds	r3, #27
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	0151      	lsls	r1, r2, #5
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	440a      	add	r2, r1
 8002080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002088:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	799b      	ldrb	r3, [r3, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01b      	beq.n	80020ca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3330      	adds	r3, #48	; 0x30
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	1ac9      	subs	r1, r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	334d      	adds	r3, #77	; 0x4d
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3344      	adds	r3, #68	; 0x44
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3326      	adds	r3, #38	; 0x26
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3326      	adds	r3, #38	; 0x26
 800212a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800212c:	2b02      	cmp	r3, #2
 800212e:	d110      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f004 f956 	bl	80063ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2310      	movs	r3, #16
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e03d      	b.n	80021ce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3326      	adds	r3, #38	; 0x26
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d00a      	beq.n	800217e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	; 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800217a:	2b01      	cmp	r3, #1
 800217c:	d127      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	0151      	lsls	r1, r2, #5
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	440a      	add	r2, r1
 8002194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800219c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	334c      	adds	r3, #76	; 0x4c
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	334c      	adds	r3, #76	; 0x4c
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f009 f95f 	bl	800b48c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	799b      	ldrb	r3, [r3, #6]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d13b      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3338      	adds	r3, #56	; 0x38
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	3328      	adds	r3, #40	; 0x28
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	440b      	add	r3, r1
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4403      	add	r3, r0
 800220c:	3328      	adds	r3, #40	; 0x28
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	fbb1 f3f3 	udiv	r3, r1, r3
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8470 	beq.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	; 0x3c
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333c      	adds	r3, #60	; 0x3c
 8002246:	4602      	mov	r2, r0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	f000 bc58 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333c      	adds	r3, #60	; 0x3c
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333c      	adds	r3, #60	; 0x3c
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	f000 bc40 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fb0b 	bl	80058a2 <USB_ReadChInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d131      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2320      	movs	r3, #32
 80022a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	331a      	adds	r3, #26
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	f040 841f 	bne.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	331b      	adds	r3, #27
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334d      	adds	r3, #77	; 0x4d
 80022e4:	2203      	movs	r2, #3
 80022e6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f87a 	bl	80063ea <USB_HC_Halt>
 80022f6:	f000 bc02 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f003 facd 	bl	80058a2 <USB_ReadChInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 8305 	bne.w	800291e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2302      	movs	r3, #2
 8002324:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	334d      	adds	r3, #77	; 0x4d
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d114      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334d      	adds	r3, #77	; 0x4d
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	; 0x4c
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e2cc      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	334d      	adds	r3, #77	; 0x4d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b06      	cmp	r3, #6
 800237a:	d114      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	; 0x4d
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	334c      	adds	r3, #76	; 0x4c
 80023a0:	2205      	movs	r2, #5
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e2ac      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	; 0x4d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d00b      	beq.n	80023d4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	; 0x4d
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	f040 80a6 	bne.w	8002520 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334d      	adds	r3, #77	; 0x4d
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3344      	adds	r3, #68	; 0x44
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4403      	add	r3, r0
 8002408:	3344      	adds	r3, #68	; 0x44
 800240a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	; 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d943      	bls.n	80024aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3344      	adds	r3, #68	; 0x44
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	331a      	adds	r3, #26
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d123      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	331b      	adds	r3, #27
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	331c      	adds	r3, #28
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	440a      	add	r2, r1
 800248a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334c      	adds	r3, #76	; 0x4c
 80024a4:	2204      	movs	r2, #4
 80024a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a8:	e229      	b.n	80028fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	334c      	adds	r3, #76	; 0x4c
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3326      	adds	r3, #38	; 0x26
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3326      	adds	r3, #38	; 0x26
 80024e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 8209 	bne.w	80028fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002502:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800251e:	e1ee      	b.n	80028fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334d      	adds	r3, #77	; 0x4d
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b05      	cmp	r3, #5
 8002534:	f040 80c8 	bne.w	80026c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	; 0x4d
 8002548:	2202      	movs	r2, #2
 800254a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331b      	adds	r3, #27
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 81ce 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3326      	adds	r3, #38	; 0x26
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d16b      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3348      	adds	r3, #72	; 0x48
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4403      	add	r3, r0
 800259a:	3348      	adds	r3, #72	; 0x48
 800259c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3348      	adds	r3, #72	; 0x48
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d943      	bls.n	800263c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3348      	adds	r3, #72	; 0x48
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	331b      	adds	r3, #27
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	; 0x44
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d809      	bhi.n	8002606 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	331c      	adds	r3, #28
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	334c      	adds	r3, #76	; 0x4c
 8002636:	2204      	movs	r2, #4
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e014      	b.n	8002666 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	; 0x4c
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e009      	b.n	8002666 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	334c      	adds	r3, #76	; 0x4c
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3326      	adds	r3, #38	; 0x26
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3326      	adds	r3, #38	; 0x26
 800268c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800268e:	2b02      	cmp	r3, #2
 8002690:	f040 8136 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e11b      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334d      	adds	r3, #77	; 0x4d
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	f040 8081 	bne.w	80027e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334d      	adds	r3, #77	; 0x4d
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	331b      	adds	r3, #27
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	f040 80fa 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	334c      	adds	r3, #76	; 0x4c
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	440a      	add	r2, r1
 8002736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f023 0320 	bic.w	r3, r3, #32
 800277e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3326      	adds	r3, #38	; 0x26
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3326      	adds	r3, #38	; 0x26
 80027a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80a9 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e08e      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	334d      	adds	r3, #77	; 0x4d
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d143      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	334d      	adds	r3, #77	; 0x4d
 8002808:	2202      	movs	r2, #2
 800280a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3326      	adds	r3, #38	; 0x26
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3326      	adds	r3, #38	; 0x26
 8002846:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002848:	2b02      	cmp	r3, #2
 800284a:	d159      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002862:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e03f      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	; 0x4d
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d126      	bne.n	80028e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	334d      	adds	r3, #77	; 0x4d
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3344      	adds	r3, #68	; 0x44
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4403      	add	r3, r0
 80028ca:	3344      	adds	r3, #68	; 0x44
 80028cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334c      	adds	r3, #76	; 0x4c
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e00d      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334d      	adds	r3, #77	; 0x4d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f000 8100 	beq.w	8002afc <HCD_HC_IN_IRQHandler+0xcca>
 80028fc:	e000      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334c      	adds	r3, #76	; 0x4c
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f008 fdb8 	bl	800b48c <HAL_HCD_HC_NotifyURBChange_Callback>
 800291c:	e0ef      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f002 ffbb 	bl	80058a2 <USB_ReadChInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d12f      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334d      	adds	r3, #77	; 0x4d
 8002958:	2205      	movs	r2, #5
 800295a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	331a      	adds	r3, #26
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	; 0x44
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fd2b 	bl	80063ea <USB_HC_Halt>
 8002994:	e0b3      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 ff7f 	bl	80058a2 <USB_ReadChInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	f040 80a7 	bne.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3326      	adds	r3, #38	; 0x26
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d11b      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3344      	adds	r3, #68	; 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	334d      	adds	r3, #77	; 0x4d
 80029ea:	2204      	movs	r2, #4
 80029ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fcf7 	bl	80063ea <USB_HC_Halt>
 80029fc:	e03f      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3326      	adds	r3, #38	; 0x26
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3326      	adds	r3, #38	; 0x26
 8002a24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d129      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3344      	adds	r3, #68	; 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	799b      	ldrb	r3, [r3, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	331b      	adds	r3, #27
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d110      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	; 0x4d
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fcb6 	bl	80063ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	331b      	adds	r3, #27
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d129      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae2:	f043 0320 	orr.w	r3, r3, #32
 8002ae6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	461a      	mov	r2, r3
 8002af6:	2310      	movs	r3, #16
 8002af8:	6093      	str	r3, [r2, #8]
 8002afa:	e000      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002afc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 febd 	bl	80058a2 <USB_ReadChInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d11b      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2304      	movs	r3, #4
 8002b42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334d      	adds	r3, #77	; 0x4d
 8002b54:	2207      	movs	r2, #7
 8002b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fc42 	bl	80063ea <USB_HC_Halt>
 8002b66:	f000 bc6f 	b.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fe95 	bl	80058a2 <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 8082 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2320      	movs	r3, #32
 8002b94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3319      	adds	r3, #25
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d124      	bne.n	8002bf6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3319      	adds	r3, #25
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334c      	adds	r3, #76	; 0x4c
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	; 0x4d
 8002be4:	2203      	movs	r2, #3
 8002be6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fbfa 	bl	80063ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	331a      	adds	r3, #26
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 841d 	bne.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8411 	bne.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3326      	adds	r3, #38	; 0x26
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d009      	beq.n	8002c50 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	331b      	adds	r3, #27
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	; 0x4d
 8002c60:	2203      	movs	r2, #3
 8002c62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fbbc 	bl	80063ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	; 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e3df      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 fe06 	bl	80058a2 <USB_ReadChInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca0:	d111      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fb93 	bl	80063ea <USB_HC_Halt>
 8002cc4:	e3c0      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fde7 	bl	80058a2 <USB_ReadChInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d168      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3344      	adds	r3, #68	; 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fdd1 	bl	80058a2 <USB_ReadChInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d112      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3319      	adds	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2340      	movs	r3, #64	; 0x40
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	331b      	adds	r3, #27
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	331b      	adds	r3, #27
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	2301      	movs	r3, #1
 8002d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334d      	adds	r3, #77	; 0x4d
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fb1e 	bl	80063ea <USB_HC_Halt>
 8002dae:	e34b      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fd72 	bl	80058a2 <USB_ReadChInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d139      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334d      	adds	r3, #77	; 0x4d
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	331a      	adds	r3, #26
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3319      	adds	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	; 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fae1 	bl	80063ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2340      	movs	r3, #64	; 0x40
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	e305      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fd2c 	bl	80058a2 <USB_ReadChInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11a      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	; 0x4d
 8002e76:	2206      	movs	r2, #6
 8002e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fab1 	bl	80063ea <USB_HC_Halt>
 8002e88:	e2de      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fd05 	bl	80058a2 <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d144      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3344      	adds	r3, #68	; 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	334d      	adds	r3, #77	; 0x4d
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3319      	adds	r3, #25
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d114      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3318      	adds	r3, #24
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3319      	adds	r3, #25
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fa69 	bl	80063ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	e28d      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fcb4 	bl	80058a2 <USB_ReadChInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d169      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	334d      	adds	r3, #77	; 0x4d
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fa3e 	bl	80063ea <USB_HC_Halt>
 8002f6e:	e049      	b.n	8003004 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3344      	adds	r3, #68	; 0x44
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4403      	add	r3, r0
 8002f90:	3344      	adds	r3, #68	; 0x44
 8002f92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3344      	adds	r3, #68	; 0x44
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d922      	bls.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3344      	adds	r3, #68	; 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334c      	adds	r3, #76	; 0x4c
 8002fce:	2204      	movs	r2, #4
 8002fd0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	334c      	adds	r3, #76	; 0x4c
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f008 fa4f 	bl	800b48c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fee:	e009      	b.n	8003004 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334c      	adds	r3, #76	; 0x4c
 8003000:	2202      	movs	r2, #2
 8003002:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e217      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fc3e 	bl	80058a2 <USB_ReadChInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d11b      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334d      	adds	r3, #77	; 0x4d
 8003042:	2209      	movs	r2, #9
 8003044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f003 f9cb 	bl	80063ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	e1ee      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fc15 	bl	80058a2 <USB_ReadChInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	f040 81df 	bne.w	8003442 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2302      	movs	r3, #2
 8003094:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334d      	adds	r3, #77	; 0x4d
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 8093 	bne.w	80031d4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334d      	adds	r3, #77	; 0x4d
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334c      	adds	r3, #76	; 0x4c
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3326      	adds	r3, #38	; 0x26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d00b      	beq.n	8003104 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3326      	adds	r3, #38	; 0x26
 80030fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f040 8190 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	799b      	ldrb	r3, [r3, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d115      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	333d      	adds	r3, #61	; 0x3d
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	f083 0301 	eor.w	r3, r3, #1
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333d      	adds	r3, #61	; 0x3d
 8003134:	4602      	mov	r2, r0
 8003136:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	799b      	ldrb	r3, [r3, #6]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 8171 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3334      	adds	r3, #52	; 0x34
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8165 	beq.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3334      	adds	r3, #52	; 0x34
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3328      	adds	r3, #40	; 0x28
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	440b      	add	r3, r1
 8003180:	1e59      	subs	r1, r3, #1
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4403      	add	r3, r0
 8003190:	3328      	adds	r3, #40	; 0x28
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 813f 	beq.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	333d      	adds	r3, #61	; 0x3d
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	333d      	adds	r3, #61	; 0x3d
 80031ce:	4602      	mov	r2, r0
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e127      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	334d      	adds	r3, #77	; 0x4d
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d120      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334d      	adds	r3, #77	; 0x4d
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331b      	adds	r3, #27
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 8107 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	; 0x4c
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e0fb      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	; 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d13a      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	; 0x4d
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	331b      	adds	r3, #27
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 80d1 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	331b      	adds	r3, #27
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6053      	str	r3, [r2, #4]
 80032b6:	e0b5      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	; 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d114      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	; 0x4d
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334c      	adds	r3, #76	; 0x4c
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e095      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	; 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d114      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	; 0x4d
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	; 0x4c
 8003332:	2205      	movs	r2, #5
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e075      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	; 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b07      	cmp	r3, #7
 800334c:	d00a      	beq.n	8003364 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	; 0x4d
 800335e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003360:	2b09      	cmp	r3, #9
 8003362:	d170      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	; 0x4d
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3344      	adds	r3, #68	; 0x44
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4403      	add	r3, r0
 8003398:	3344      	adds	r3, #68	; 0x44
 800339a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3344      	adds	r3, #68	; 0x44
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d914      	bls.n	80033dc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3344      	adds	r3, #68	; 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334c      	adds	r3, #76	; 0x4c
 80033d6:	2204      	movs	r2, #4
 80033d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033da:	e022      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	334c      	adds	r3, #76	; 0x4c
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003406:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003422:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	; 0x4c
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f008 f826 	bl	800b48c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003440:	e002      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003446:	bf00      	nop
  }
}
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	; 0x28
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	0c5b      	lsrs	r3, r3, #17
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003482:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d004      	beq.n	8003494 <HCD_RXQLVL_IRQHandler+0x46>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b05      	cmp	r3, #5
 800348e:	f000 80b6 	beq.w	80035fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003492:	e0b7      	b.n	8003604 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80b3 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	332c      	adds	r3, #44	; 0x2c
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a7 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3338      	adds	r3, #56	; 0x38
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	18d1      	adds	r1, r2, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4403      	add	r3, r0
 80034d8:	3334      	adds	r3, #52	; 0x34
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4299      	cmp	r1, r3
 80034de:	f200 8083 	bhi.w	80035e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	332c      	adds	r3, #44	; 0x2c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	b292      	uxth	r2, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f002 f965 	bl	80057cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	332c      	adds	r3, #44	; 0x2c
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	18d1      	adds	r1, r2, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4403      	add	r3, r0
 8003526:	332c      	adds	r3, #44	; 0x2c
 8003528:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	3338      	adds	r3, #56	; 0x38
 8003550:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	0cdb      	lsrs	r3, r3, #19
 8003562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003566:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3328      	adds	r3, #40	; 0x28
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4293      	cmp	r3, r2
 8003580:	d13f      	bne.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800359e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	; 0x3c
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2d8      	uxtb	r0, r3
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	333c      	adds	r3, #60	; 0x3c
 80035e2:	4602      	mov	r2, r0
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e00c      	b.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334c      	adds	r3, #76	; 0x4c
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]
      break;
 80035fc:	e001      	b.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003602:	bf00      	nop
  }
}
 8003604:	bf00      	nop
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003638:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d10b      	bne.n	800365c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f007 ff00 	bl	800b454 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b08      	cmp	r3, #8
 8003664:	d132      	bne.n	80036cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d126      	bne.n	80036c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7a5b      	ldrb	r3, [r3, #9]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d113      	bne.n	80036a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368a:	d106      	bne.n	800369a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fa2a 	bl	8005aec <USB_InitFSLSPClkSel>
 8003698:	e011      	b.n	80036be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 fa23 	bl	8005aec <USB_InitFSLSPClkSel>
 80036a6:	e00a      	b.n	80036be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	79db      	ldrb	r3, [r3, #7]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b6:	461a      	mov	r2, r3
 80036b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f007 fef6 	bl	800b4b0 <HAL_HCD_PortEnabled_Callback>
 80036c4:	e002      	b.n	80036cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f007 ff00 	bl	800b4cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d103      	bne.n	80036de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f043 0320 	orr.w	r3, r3, #32
 80036dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e12b      	b.n	800395e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd f988 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003758:	f001 fa20 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a81      	ldr	r2, [pc, #516]	; (8003968 <HAL_I2C_Init+0x274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d807      	bhi.n	8003778 <HAL_I2C_Init+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a80      	ldr	r2, [pc, #512]	; (800396c <HAL_I2C_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e006      	b.n	8003786 <HAL_I2C_Init+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a7d      	ldr	r2, [pc, #500]	; (8003970 <HAL_I2C_Init+0x27c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e7      	b.n	800395e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a78      	ldr	r2, [pc, #480]	; (8003974 <HAL_I2C_Init+0x280>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <HAL_I2C_Init+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d802      	bhi.n	80037c8 <HAL_I2C_Init+0xd4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	e009      	b.n	80037dc <HAL_I2C_Init+0xe8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_I2C_Init+0x284>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	3301      	adds	r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	495c      	ldr	r1, [pc, #368]	; (8003968 <HAL_I2C_Init+0x274>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d819      	bhi.n	8003830 <HAL_I2C_Init+0x13c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e59      	subs	r1, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb1 f3f3 	udiv	r3, r1, r3
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003810:	400b      	ands	r3, r1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_I2C_Init+0x138>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e59      	subs	r1, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	e051      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800382c:	2304      	movs	r3, #4
 800382e:	e04f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d111      	bne.n	800385c <HAL_I2C_Init+0x168>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e012      	b.n	8003882 <HAL_I2C_Init+0x18e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Init+0x196>
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_I2C_Init+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e58      	subs	r0, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6809      	ldr	r1, [r1, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6911      	ldr	r1, [r2, #16]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	003d08ff 	.word	0x003d08ff
 8003974:	431bde83 	.word	0x431bde83
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e128      	b.n	8003be0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a90      	ldr	r2, [pc, #576]	; (8003be8 <HAL_I2S_Init+0x26c>)
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd f889 	bl	8000ac0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2202      	movs	r2, #2
 80039d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d060      	beq.n	8003a9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e2:	2310      	movs	r3, #16
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e001      	b.n	80039ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d802      	bhi.n	80039fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f001 f9f6 	bl	8004dec <HAL_RCCEx_GetPeriphCLKFreq>
 8003a00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0a:	d125      	bne.n	8003a58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	3305      	adds	r3, #5
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e01f      	b.n	8003a76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	3305      	adds	r3, #5
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e00e      	b.n	8003a76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	3305      	adds	r3, #5
 8003a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_I2S_Init+0x270>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d902      	bls.n	8003ab0 <HAL_I2S_Init+0x134>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2bff      	cmp	r3, #255	; 0xff
 8003aae:	d907      	bls.n	8003ac0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e08f      	b.n	8003be0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ade:	f023 030f 	bic.w	r3, r3, #15
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6851      	ldr	r1, [r2, #4]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68d2      	ldr	r2, [r2, #12]
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6992      	ldr	r2, [r2, #24]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d161      	bne.n	8003bd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <HAL_I2S_Init+0x274>)
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a37      	ldr	r2, [pc, #220]	; (8003bf4 <HAL_I2S_Init+0x278>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2S_Init+0x1a4>
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0x1a8>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	4932      	ldr	r1, [pc, #200]	; (8003bf4 <HAL_I2S_Init+0x278>)
 8003b2c:	428a      	cmp	r2, r1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2S_Init+0x1b8>
 8003b30:	4a31      	ldr	r2, [pc, #196]	; (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b32:	e001      	b.n	8003b38 <HAL_I2S_Init+0x1bc>
 8003b34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b3c:	f023 030f 	bic.w	r3, r3, #15
 8003b40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <HAL_I2S_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2S_Init+0x1d4>
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b4e:	e001      	b.n	8003b54 <HAL_I2S_Init+0x1d8>
 8003b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b54:	2202      	movs	r2, #2
 8003b56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_I2S_Init+0x278>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_I2S_Init+0x1ea>
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b64:	e001      	b.n	8003b6a <HAL_I2S_Init+0x1ee>
 8003b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b76:	d003      	beq.n	8003b80 <HAL_I2S_Init+0x204>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e001      	b.n	8003b8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003baa:	4313      	orrs	r3, r2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_I2S_Init+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2S_Init+0x24c>
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_I2S_Init+0x27c>)
 8003bc6:	e001      	b.n	8003bcc <HAL_I2S_Init+0x250>
 8003bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bcc:	897a      	ldrh	r2, [r7, #10]
 8003bce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	08003cf3 	.word	0x08003cf3
 8003bec:	cccccccd 	.word	0xcccccccd
 8003bf0:	08003e09 	.word	0x08003e09
 8003bf4:	40003800 	.word	0x40003800
 8003bf8:	40003400 	.word	0x40003400

08003bfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffb8 	bl	8003bfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10e      	bne.n	8003cea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff93 	bl	8003c10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d13a      	bne.n	8003d84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d109      	bne.n	8003d2c <I2S_IRQHandler+0x3a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d102      	bne.n	8003d2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffb4 	bl	8003c94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d126      	bne.n	8003d84 <I2S_IRQHandler+0x92>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d11f      	bne.n	8003d84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff50 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d136      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d109      	bne.n	8003dae <I2S_IRQHandler+0xbc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d102      	bne.n	8003dae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff45 	bl	8003c38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d122      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d11b      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff13 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a92      	ldr	r2, [pc, #584]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e22:	4b92      	ldr	r3, [pc, #584]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8b      	ldr	r2, [pc, #556]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e40:	4b8a      	ldr	r3, [pc, #552]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e42:	e001      	b.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e54:	d004      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8099 	bne.w	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f925 	bl	80040c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d107      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9c8 	bl	8004224 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d13a      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d035      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a6e      	ldr	r2, [pc, #440]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4969      	ldr	r1, [pc, #420]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec2:	428b      	cmp	r3, r1
 8003ec4:	d101      	bne.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec8:	e001      	b.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe88 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	f040 80c3 	bne.w	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80bd 	beq.w	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f46:	4b49      	ldr	r3, [pc, #292]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4944      	ldr	r1, [pc, #272]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5a:	4b44      	ldr	r3, [pc, #272]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f5c:	e001      	b.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f043 0204 	orr.w	r2, r3, #4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe4a 	bl	8003c24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f90:	e089      	b.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8be 	bl	8004128 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8fd 	bl	80041c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d12f      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02a      	beq.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4919      	ldr	r1, [pc, #100]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004004:	428b      	cmp	r3, r1
 8004006:	d101      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004008:	4b18      	ldr	r3, [pc, #96]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400a:	e001      	b.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800400c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004014:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fdfa 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b08      	cmp	r3, #8
 8004038:	d136      	bne.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d031      	beq.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004050:	e001      	b.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4902      	ldr	r1, [pc, #8]	; (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800405e:	428b      	cmp	r3, r1
 8004060:	d106      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004062:	4b02      	ldr	r3, [pc, #8]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004064:	e006      	b.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004066:	bf00      	nop
 8004068:	40003800 	.word	0x40003800
 800406c:	40003400 	.word	0x40003400
 8004070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004078:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004088:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fdc0 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	e000      	b.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040a6:	bf00      	nop
}
 80040a8:	bf00      	nop
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c99      	adds	r1, r3, #2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6251      	str	r1, [r2, #36]	; 0x24
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d113      	bne.n	800411e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004104:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffc9 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c99      	adds	r1, r3, #2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6251      	str	r1, [r2, #36]	; 0x24
 800413a:	8819      	ldrh	r1, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <I2SEx_TxISR_I2SExt+0x22>
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 8004148:	e001      	b.n	800414e <I2SEx_TxISR_I2SExt+0x26>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800414e:	460a      	mov	r2, r1
 8004150:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d121      	bne.n	80041ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <I2SEx_TxISR_I2SExt+0x50>
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_TxISR_I2SExt+0x54>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	490d      	ldr	r1, [pc, #52]	; (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004184:	428b      	cmp	r3, r1
 8004186:	d101      	bne.n	800418c <I2SEx_TxISR_I2SExt+0x64>
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 800418a:	e001      	b.n	8004190 <I2SEx_TxISR_I2SExt+0x68>
 800418c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff81 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003400 	.word	0x40003400

080041c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68d8      	ldr	r0, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	1c99      	adds	r1, r3, #2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041d8:	b282      	uxth	r2, r0
 80041da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004202:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff4a 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a20      	ldr	r2, [pc, #128]	; (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <I2SEx_RxISR_I2SExt+0x16>
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004238:	e001      	b.n	800423e <I2SEx_RxISR_I2SExt+0x1a>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423e:	68d8      	ldr	r0, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	62d1      	str	r1, [r2, #44]	; 0x2c
 800424a:	b282      	uxth	r2, r0
 800424c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d121      	bne.n	80042aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <I2SEx_RxISR_I2SExt+0x50>
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004272:	e001      	b.n	8004278 <I2SEx_RxISR_I2SExt+0x54>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	490d      	ldr	r1, [pc, #52]	; (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004280:	428b      	cmp	r3, r1
 8004282:	d101      	bne.n	8004288 <I2SEx_RxISR_I2SExt+0x64>
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004286:	e001      	b.n	800428c <I2SEx_RxISR_I2SExt+0x68>
 8004288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004290:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff03 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40003800 	.word	0x40003800
 80042b8:	40003400 	.word	0x40003400

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fc fddc 	bl	8000f30 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fc fdd8 	bl	8000f30 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fc fdc8 	bl	8000f30 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fc fdc4 	bl	8000f30 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc fd7d 	bl	8000f30 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fc fd79 	bl	8000f30 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fc fd5c 	bl	8000f30 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fc fd58 	bl	8000f30 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fc fd3c 	bl	8000f30 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fc fd38 	bl	8000f30 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fc fd25 	bl	8000f30 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fc fd21 	bl	8000f30 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fc fce1 	bl	8000f30 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fc fcdd 	bl	8000f30 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc fca2 	bl	8000f30 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc fc9e 	bl	8000f30 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fc fc8c 	bl	8000f30 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc fc88 	bl	8000f30 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fc fc5c 	bl	8000f30 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fc58 	bl	8000f30 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fc31 	bl	8000f30 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc fc2d 	bl	8000f30 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fc1a 	bl	8000f30 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fc16 	bl	8000f30 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fc fb48 	bl	8000f30 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fc fb44 	bl	8000f30 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc f99e 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	0800bcb8 	.word	0x0800bcb8
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	; 0x50
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fb fba2 	bl	80001d0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fb fb48 	bl	80001d0 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	; 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000000 	.word	0x20000000

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800bcc8 	.word	0x0800bcc8

08004bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0203 	and.w	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <HAL_RCC_GetClockConfig+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0207 	and.w	r2, r3, #7
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	601a      	str	r2, [r3, #0]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40023c00 	.word	0x40023c00

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d035      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c50:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c56:	f7fc f96b 	bl	8000f30 <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c5e:	f7fc f967 	bl	8000f30 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e0b0      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c70:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	019a      	lsls	r2, r3, #6
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	071b      	lsls	r3, r3, #28
 8004c88:	4955      	ldr	r1, [pc, #340]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c90:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc f94b 	bl	8000f30 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9e:	f7fc f947 	bl	8000f30 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e090      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8083 	beq.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a43      	ldr	r2, [pc, #268]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3e      	ldr	r2, [pc, #248]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf2:	f7fc f91d 	bl	8000f30 <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fc f919 	bl	8000f30 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e062      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0c:	4b35      	ldr	r3, [pc, #212]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d028      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d46:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d4c:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d114      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fc f8e7 	bl	8000f30 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fc f8e3 	bl	8000f30 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e02a      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	490d      	ldr	r1, [pc, #52]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]
 8004db0:	e005      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	4905      	ldr	r1, [pc, #20]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	42470068 	.word	0x42470068
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470e40 	.word	0x42470e40

08004dec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d13f      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d006      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e20:	d12f      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e24:	617b      	str	r3, [r7, #20]
          break;
 8004e26:	e02f      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e34:	d108      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	e007      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e72:	0f1b      	lsrs	r3, r3, #28
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	617b      	str	r3, [r7, #20]
          break;
 8004e80:	e002      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
          break;
 8004e86:	bf00      	nop
        }
      }
      break;
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e8a:	bf00      	nop
    }
  }
  return frequency;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	00bb8000 	.word	0x00bb8000
 8004ea4:	007a1200 	.word	0x007a1200
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07b      	b.n	8004fb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d108      	bne.n	8004ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d009      	beq.n	8004ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61da      	str	r2, [r3, #28]
 8004ed6:	e005      	b.n	8004ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fb fe5e 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0104 	and.w	r1, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0210 	and.w	r2, r3, #16
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e041      	b.n	8005054 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fb fe33 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f000 f9b5 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e04e      	b.n	8005112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_TIM_Base_Start_IT+0xc4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d01d      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_TIM_Base_Start_IT+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_TIM_Base_Start_IT+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_TIM_Base_Start_IT+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_TIM_Base_Start_IT+0xdc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d111      	bne.n	8005100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d010      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	e007      	b.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40010400 	.word	0x40010400
 8005134:	40014000 	.word	0x40014000
 8005138:	40001800 	.word	0x40001800

0800513c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0202 	mvn.w	r2, #2
 8005170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8d2 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8c4 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8d5 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0204 	mvn.w	r2, #4
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8ac 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f89e 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8af 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0208 	mvn.w	r2, #8
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f886 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f878 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f889 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f860 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f852 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f863 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0201 	mvn.w	r2, #1
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb fb80 	bl	80009a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f906 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f834 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0220 	mvn.w	r2, #32
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8d8 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a46      	ldr	r2, [pc, #280]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a43      	ldr	r2, [pc, #268]	; (800549c <TIM_Base_SetConfig+0x130>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a42      	ldr	r2, [pc, #264]	; (80054a0 <TIM_Base_SetConfig+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a41      	ldr	r2, [pc, #260]	; (80054a4 <TIM_Base_SetConfig+0x138>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a40      	ldr	r2, [pc, #256]	; (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d027      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <TIM_Base_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d023      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a31      	ldr	r2, [pc, #196]	; (80054a0 <TIM_Base_SetConfig+0x134>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a30      	ldr	r2, [pc, #192]	; (80054a4 <TIM_Base_SetConfig+0x138>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2e      	ldr	r2, [pc, #184]	; (80054ac <TIM_Base_SetConfig+0x140>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	; (80054b0 <TIM_Base_SetConfig+0x144>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <TIM_Base_SetConfig+0x148>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <TIM_Base_SetConfig+0x14c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <TIM_Base_SetConfig+0x150>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a29      	ldr	r2, [pc, #164]	; (80054c0 <TIM_Base_SetConfig+0x154>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a10      	ldr	r2, [pc, #64]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <TIM_Base_SetConfig+0x13c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	611a      	str	r2, [r3, #16]
  }
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800
 80054b8:	40001800 	.word	0x40001800
 80054bc:	40001c00 	.word	0x40001c00
 80054c0:	40002000 	.word	0x40002000

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ec:	b084      	sub	sp, #16
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	f107 001c 	add.w	r0, r7, #28
 80054fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005502:	2b01      	cmp	r3, #1
 8005504:	d123      	bne.n	800554e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800552e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9dc 	bl	8005900 <USB_CoreReset>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	e01b      	b.n	8005586 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9d0 	bl	8005900 <USB_CoreReset>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
 8005578:	e005      	b.n	8005586 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005586:	7fbb      	ldrb	r3, [r7, #30]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10b      	bne.n	80055a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f043 0206 	orr.w	r2, r3, #6
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr

080055b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f043 0201 	orr.w	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d115      	bne.n	8005646 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005626:	200a      	movs	r0, #10
 8005628:	f7fb fc8e 	bl	8000f48 <HAL_Delay>
      ms += 10U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	330a      	adds	r3, #10
 8005630:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f956 	bl	80058e4 <USB_GetMode>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d01e      	beq.n	800567c <USB_SetCurrentMode+0x84>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2bc7      	cmp	r3, #199	; 0xc7
 8005642:	d9f0      	bls.n	8005626 <USB_SetCurrentMode+0x2e>
 8005644:	e01a      	b.n	800567c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d115      	bne.n	8005678 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005658:	200a      	movs	r0, #10
 800565a:	f7fb fc75 	bl	8000f48 <HAL_Delay>
      ms += 10U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	330a      	adds	r3, #10
 8005662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f93d 	bl	80058e4 <USB_GetMode>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <USB_SetCurrentMode+0x84>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2bc7      	cmp	r3, #199	; 0xc7
 8005674:	d9f0      	bls.n	8005658 <USB_SetCurrentMode+0x60>
 8005676:	e001      	b.n	800567c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e005      	b.n	8005688 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2bc8      	cmp	r3, #200	; 0xc8
 8005680:	d101      	bne.n	8005686 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056aa:	d901      	bls.n	80056b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e01b      	b.n	80056e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	daf2      	bge.n	800569e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	019b      	lsls	r3, r3, #6
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056d4:	d901      	bls.n	80056da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e006      	b.n	80056e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d0f0      	beq.n	80056c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800570c:	d901      	bls.n	8005712 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e018      	b.n	8005744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	daf2      	bge.n	8005700 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2210      	movs	r2, #16
 8005722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005730:	d901      	bls.n	8005736 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e006      	b.n	8005744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b10      	cmp	r3, #16
 8005740:	d0f0      	beq.n	8005724 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	460b      	mov	r3, r1
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	4613      	mov	r3, r2
 8005764:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800576e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d123      	bne.n	80057be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	3303      	adds	r3, #3
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e018      	b.n	80057b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	031a      	lsls	r2, r3, #12
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	461a      	mov	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3e2      	bcc.n	8005784 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3724      	adds	r7, #36	; 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b08b      	sub	sp, #44	; 0x2c
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e014      	b.n	8005822 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	601a      	str	r2, [r3, #0]
    pDest++;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	3301      	adds	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	3301      	adds	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	3301      	adds	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	3301      	adds	r3, #1
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	429a      	cmp	r2, r3
 8005828:	d3e6      	bcc.n	80057f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800582a:	8bfb      	ldrh	r3, [r7, #30]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01e      	beq.n	800586e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	461a      	mov	r2, r3
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	701a      	strb	r2, [r3, #0]
      i++;
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	3301      	adds	r3, #1
 800585a:	623b      	str	r3, [r7, #32]
      pDest++;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005862:	8bfb      	ldrh	r3, [r7, #30]
 8005864:	3b01      	subs	r3, #1
 8005866:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005868:	8bfb      	ldrh	r3, [r7, #30]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ea      	bne.n	8005844 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005870:	4618      	mov	r0, r3
 8005872:	372c      	adds	r7, #44	; 0x2c
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058d6:	68bb      	ldr	r3, [r7, #8]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0301 	and.w	r3, r3, #1
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005918:	d901      	bls.n	800591e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e01b      	b.n	8005956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	daf2      	bge.n	800590c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005942:	d901      	bls.n	8005948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d0f0      	beq.n	8005936 <USB_CoreReset+0x36>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005964:	b084      	sub	sp, #16
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005984:	461a      	mov	r2, r3
 8005986:	2300      	movs	r3, #0
 8005988:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d119      	bne.n	80059ee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10a      	bne.n	80059d8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d0:	f043 0304 	orr.w	r3, r3, #4
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e014      	b.n	8005a02 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059e6:	f023 0304 	bic.w	r3, r3, #4
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	e009      	b.n	8005a02 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a02:	2110      	movs	r1, #16
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff fe43 	bl	8005690 <USB_FlushTxFifo>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fe6d 	bl	80056f4 <USB_FlushRxFifo>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	e015      	b.n	8005a56 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a36:	461a      	mov	r2, r3
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	3301      	adds	r3, #1
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d3e3      	bcc.n	8005a2a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <USB_HostInit+0x170>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10b      	bne.n	8005a90 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <USB_HostInit+0x174>)
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <USB_HostInit+0x178>)
 8005a8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a8e:	e009      	b.n	8005aa4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <USB_HostInit+0x17c>)
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <USB_HostInit+0x180>)
 8005aa0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f043 0210 	orr.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <USB_HostInit+0x184>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad0:	b004      	add	sp, #16
 8005ad2:	4770      	bx	lr
 8005ad4:	40040000 	.word	0x40040000
 8005ad8:	01000200 	.word	0x01000200
 8005adc:	00e00300 	.word	0x00e00300
 8005ae0:	00600080 	.word	0x00600080
 8005ae4:	004000e0 	.word	0x004000e0
 8005ae8:	a3200008 	.word	0xa3200008

08005aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b34:	461a      	mov	r2, r3
 8005b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b3a:	6053      	str	r3, [r2, #4]
 8005b3c:	e00c      	b.n	8005b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d107      	bne.n	8005b54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b50:	6053      	str	r3, [r2, #4]
 8005b52:	e001      	b.n	8005b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b96:	2064      	movs	r0, #100	; 0x64
 8005b98:	f7fb f9d6 	bl	8000f48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005baa:	200a      	movs	r0, #10
 8005bac:	f7fb f9cc 	bl	8000f48 <HAL_Delay>

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <USB_DriveVbus+0x44>
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bfc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d109      	bne.n	8005c1e <USB_DriveVbus+0x64>
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c1c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0c5b      	lsrs	r3, r3, #17
 8005c4a:	f003 0303 	and.w	r3, r3, #3
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	b29b      	uxth	r3, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	70fb      	strb	r3, [r7, #3]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70bb      	strb	r3, [r7, #2]
 8005c92:	4613      	mov	r3, r2
 8005c94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	461a      	mov	r2, r3
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d87c      	bhi.n	8005db4 <USB_HC_Init+0x138>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USB_HC_Init+0x44>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005d77 	.word	0x08005d77
 8005cc8:	08005cd1 	.word	0x08005cd1
 8005ccc:	08005d39 	.word	0x08005d39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ce2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da10      	bge.n	8005d0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d0c:	e055      	b.n	8005dba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a6f      	ldr	r2, [pc, #444]	; (8005ed0 <USB_HC_Init+0x254>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d151      	bne.n	8005dba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d34:	60d3      	str	r3, [r2, #12]
      break;
 8005d36:	e040      	b.n	8005dba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	461a      	mov	r2, r3
 8005d46:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da34      	bge.n	8005dbe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d74:	e023      	b.n	8005dbe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	461a      	mov	r2, r3
 8005d84:	f240 2325 	movw	r3, #549	; 0x225
 8005d88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da17      	bge.n	8005dc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005db0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005db2:	e006      	b.n	8005dc2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	77fb      	strb	r3, [r7, #31]
      break;
 8005db8:	e004      	b.n	8005dc4 <USB_HC_Init+0x148>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <USB_HC_Init+0x148>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <USB_HC_Init+0x148>
      break;
 8005dc2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	6939      	ldr	r1, [r7, #16]
 8005e0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e10:	4313      	orrs	r3, r2
 8005e12:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da03      	bge.n	8005e30 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e001      	b.n	8005e34 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fef9 	bl	8005c2c <USB_GetHostSpeed>
 8005e3a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d106      	bne.n	8005e52 <USB_HC_Init+0x1d6>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d003      	beq.n	8005e52 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e001      	b.n	8005e56 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e56:	787b      	ldrb	r3, [r7, #1]
 8005e58:	059b      	lsls	r3, r3, #22
 8005e5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e5e:	78bb      	ldrb	r3, [r7, #2]
 8005e60:	02db      	lsls	r3, r3, #11
 8005e62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e6c:	049b      	lsls	r3, r3, #18
 8005e6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005e74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e7a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e94:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d003      	beq.n	8005ea6 <USB_HC_Init+0x22a>
 8005e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10f      	bne.n	8005ec6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40040000 	.word	0x40040000

08005ed4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08c      	sub	sp, #48	; 0x30
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a5d      	ldr	r2, [pc, #372]	; (800606c <USB_HC_StartXfer+0x198>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d12f      	bne.n	8005f5a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d11c      	bne.n	8005f3a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	7c9b      	ldrb	r3, [r3, #18]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <USB_HC_StartXfer+0x3c>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	7c9b      	ldrb	r3, [r3, #18]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d124      	bne.n	8005f5a <USB_HC_StartXfer+0x86>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	799b      	ldrb	r3, [r3, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d120      	bne.n	8005f5a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60d3      	str	r3, [r2, #12]
 8005f38:	e00f      	b.n	8005f5a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	791b      	ldrb	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <USB_HC_StartXfer+0x86>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	795b      	ldrb	r3, [r3, #5]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d107      	bne.n	8005f5a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fb6b 	bl	800662c <USB_DoPing>
        return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e232      	b.n	80063c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	799b      	ldrb	r3, [r3, #6]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d158      	bne.n	8006014 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005f62:	2301      	movs	r3, #1
 8005f64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	8a92      	ldrh	r2, [r2, #20]
 8005f74:	fb03 f202 	mul.w	r2, r3, r2
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	61da      	str	r2, [r3, #28]
 8005f7c:	e07c      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	7c9b      	ldrb	r3, [r3, #18]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d130      	bne.n	8005fe8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	2bbc      	cmp	r3, #188	; 0xbc
 8005f8c:	d918      	bls.n	8005fc0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	8a9b      	ldrh	r3, [r3, #20]
 8005f92:	461a      	mov	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d003      	beq.n	8005fb0 <USB_HC_StartXfer+0xdc>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d103      	bne.n	8005fb8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	e05f      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e05b      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6a1a      	ldr	r2, [r3, #32]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d007      	beq.n	8005fe0 <USB_HC_StartXfer+0x10c>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d003      	beq.n	8005fe0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	e04b      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	e047      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10d      	bne.n	800600a <USB_HC_StartXfer+0x136>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	8a92      	ldrh	r2, [r2, #20]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d907      	bls.n	800600a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	8a92      	ldrh	r2, [r2, #20]
 8006000:	fb03 f202 	mul.w	r2, r3, r2
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61da      	str	r2, [r3, #28]
 8006008:	e036      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61da      	str	r2, [r3, #28]
 8006012:	e031      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d018      	beq.n	800604e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	8a92      	ldrh	r2, [r2, #20]
 8006024:	4413      	add	r3, r2
 8006026:	3b01      	subs	r3, #1
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	8a92      	ldrh	r2, [r2, #20]
 800602c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006030:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006032:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006034:	8b7b      	ldrh	r3, [r7, #26]
 8006036:	429a      	cmp	r2, r3
 8006038:	d90b      	bls.n	8006052 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800603a:	8b7b      	ldrh	r3, [r7, #26]
 800603c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800603e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	8a92      	ldrh	r2, [r2, #20]
 8006044:	fb03 f202 	mul.w	r2, r3, r2
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61da      	str	r2, [r3, #28]
 800604c:	e001      	b.n	8006052 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	78db      	ldrb	r3, [r3, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800605a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	8a92      	ldrh	r2, [r2, #20]
 8006060:	fb03 f202 	mul.w	r2, r3, r2
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61da      	str	r2, [r3, #28]
 8006068:	e006      	b.n	8006078 <USB_HC_StartXfer+0x1a4>
 800606a:	bf00      	nop
 800606c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006082:	04d9      	lsls	r1, r3, #19
 8006084:	4ba3      	ldr	r3, [pc, #652]	; (8006314 <USB_HC_StartXfer+0x440>)
 8006086:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006088:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	7d9b      	ldrb	r3, [r3, #22]
 800608e:	075b      	lsls	r3, r3, #29
 8006090:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	4401      	add	r1, r0
 800609c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	460a      	mov	r2, r1
 80060bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	7e7b      	ldrb	r3, [r7, #25]
 8006106:	075b      	lsls	r3, r3, #29
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	0148      	lsls	r0, r1, #5
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	4401      	add	r1, r0
 8006110:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	799b      	ldrb	r3, [r3, #6]
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 80c3 	bne.w	80062a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	7c5b      	ldrb	r3, [r3, #17]
 8006126:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800612c:	4313      	orrs	r3, r2
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	440a      	add	r2, r1
 8006136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800613a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800613e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	6a3a      	ldr	r2, [r7, #32]
 8006154:	440a      	add	r2, r1
 8006156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800615e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	79db      	ldrb	r3, [r3, #7]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d123      	bne.n	80061b0 <USB_HC_StartXfer+0x2dc>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11f      	bne.n	80061b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	6a3a      	ldr	r2, [r7, #32]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	7c9b      	ldrb	r3, [r3, #18]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d003      	beq.n	80061c0 <USB_HC_StartXfer+0x2ec>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	7c9b      	ldrb	r3, [r3, #18]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d117      	bne.n	80061f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d113      	bne.n	80061f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	78db      	ldrb	r3, [r3, #3]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10f      	bne.n	80061f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	7c9b      	ldrb	r3, [r3, #18]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d162      	bne.n	80062be <USB_HC_StartXfer+0x3ea>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d15e      	bne.n	80062be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	3b01      	subs	r3, #1
 8006206:	2b03      	cmp	r3, #3
 8006208:	d858      	bhi.n	80062bc <USB_HC_StartXfer+0x3e8>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <USB_HC_StartXfer+0x33c>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006221 	.word	0x08006221
 8006214:	08006243 	.word	0x08006243
 8006218:	08006265 	.word	0x08006265
 800621c:	08006287 	.word	0x08006287
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	440a      	add	r2, r1
 8006236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623e:	6053      	str	r3, [r2, #4]
          break;
 8006240:	e03d      	b.n	80062be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	440a      	add	r2, r1
 8006258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625c:	f043 030e 	orr.w	r3, r3, #14
 8006260:	6053      	str	r3, [r2, #4]
          break;
 8006262:	e02c      	b.n	80062be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006282:	6053      	str	r3, [r2, #4]
          break;
 8006284:	e01b      	b.n	80062be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a4:	6053      	str	r3, [r2, #4]
          break;
 80062a6:	e00a      	b.n	80062be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	461a      	mov	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	6053      	str	r3, [r2, #4]
 80062ba:	e000      	b.n	80062be <USB_HC_StartXfer+0x3ea>
          break;
 80062bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e003      	b.n	80062f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006304:	461a      	mov	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e055      	b.n	80063c0 <USB_HC_StartXfer+0x4ec>
 8006314:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	78db      	ldrb	r3, [r3, #3]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d14e      	bne.n	80063be <USB_HC_StartXfer+0x4ea>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04a      	beq.n	80063be <USB_HC_StartXfer+0x4ea>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	79db      	ldrb	r3, [r3, #7]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d146      	bne.n	80063be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	7c9b      	ldrb	r3, [r3, #18]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d831      	bhi.n	800639c <USB_HC_StartXfer+0x4c8>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USB_HC_StartXfer+0x46c>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006351 	.word	0x08006351
 8006344:	08006375 	.word	0x08006375
 8006348:	08006351 	.word	0x08006351
 800634c:	08006375 	.word	0x08006375
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	3303      	adds	r3, #3
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800635a:	8afa      	ldrh	r2, [r7, #22]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	b29b      	uxth	r3, r3
 8006362:	429a      	cmp	r2, r3
 8006364:	d91c      	bls.n	80063a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	619a      	str	r2, [r3, #24]
        }
        break;
 8006372:	e015      	b.n	80063a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800637e:	8afa      	ldrh	r2, [r7, #22]
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	b29b      	uxth	r3, r3
 800638a:	429a      	cmp	r2, r3
 800638c:	d90a      	bls.n	80063a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	619a      	str	r2, [r3, #24]
        }
        break;
 800639a:	e003      	b.n	80063a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800639c:	bf00      	nop
 800639e:	e002      	b.n	80063a6 <USB_HC_StartXfer+0x4d2>
        break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <USB_HC_StartXfer+0x4d2>
        break;
 80063a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785a      	ldrb	r2, [r3, #1]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2000      	movs	r0, #0
 80063b6:	9000      	str	r0, [sp, #0]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff f9c9 	bl	8005750 <USB_WritePacket>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	b29b      	uxth	r3, r3
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b089      	sub	sp, #36	; 0x24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0c9b      	lsrs	r3, r3, #18
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	0fdb      	lsrs	r3, r3, #31
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	0fdb      	lsrs	r3, r3, #31
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b20      	cmp	r3, #32
 800644e:	d10d      	bne.n	800646c <USB_HC_Halt+0x82>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <USB_HC_Halt+0x82>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d002      	beq.n	8006468 <USB_HC_Halt+0x7e>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d101      	bne.n	800646c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e0d8      	b.n	800661e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <USB_HC_Halt+0x8e>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d173      	bne.n	8006560 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006496:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d14a      	bne.n	800653a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d133      	bne.n	8006518 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3301      	adds	r3, #1
 80064f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064fc:	d82e      	bhi.n	800655c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006514:	d0ec      	beq.n	80064f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006516:	e081      	b.n	800661c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006536:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006538:	e070      	b.n	800661c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655a:	e05f      	b.n	800661c <USB_HC_Halt+0x232>
            break;
 800655c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655e:	e05d      	b.n	800661c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d133      	bne.n	80065f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065dc:	d81d      	bhi.n	800661a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f4:	d0ec      	beq.n	80065d0 <USB_HC_Halt+0x1e6>
 80065f6:	e011      	b.n	800661c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e000      	b.n	800661c <USB_HC_Halt+0x232>
          break;
 800661a:	bf00      	nop
    }
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3724      	adds	r7, #36	; 0x24
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006640:	2301      	movs	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	04da      	lsls	r2, r3, #19
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <USB_DoPing+0x74>)
 800664a:	4013      	ands	r3, r2
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	440a      	add	r2, r1
 8006654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800665c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006674:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	4413      	add	r3, r2
 8006686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668a:	461a      	mov	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	1ff80000 	.word	0x1ff80000

080066a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fe ff8c 	bl	80055d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066be:	2110      	movs	r1, #16
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fe ffe5 	bl	8005690 <USB_FlushTxFifo>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff f80f 	bl	80056f4 <USB_FlushRxFifo>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066e0:	2300      	movs	r3, #0
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e01f      	b.n	8006726 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006704:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800670c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	461a      	mov	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	3301      	adds	r3, #1
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d9dc      	bls.n	80066e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	e034      	b.n	800679c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006748:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006750:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006758:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	461a      	mov	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006778:	d80c      	bhi.n	8006794 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006790:	d0ec      	beq.n	800676c <USB_StopHost+0xc8>
 8006792:	e000      	b.n	8006796 <USB_StopHost+0xf2>
        break;
 8006794:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3301      	adds	r3, #1
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d9c7      	bls.n	8006732 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a8:	461a      	mov	r2, r3
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fe fefb 	bl	80055b4 <USB_EnableGlobalInt>

  return ret;
 80067be:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b089      	sub	sp, #36	; 0x24
 80067cc:	af04      	add	r7, sp, #16
 80067ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067d0:	2301      	movs	r3, #1
 80067d2:	2202      	movs	r2, #2
 80067d4:	2102      	movs	r1, #2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fcd7 	bl	800718a <USBH_FindInterface>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2bff      	cmp	r3, #255	; 0xff
 80067e4:	d002      	beq.n	80067ec <USBH_CDC_InterfaceInit+0x24>
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d901      	bls.n	80067f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e13d      	b.n	8006a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fcac 	bl	8007152 <USBH_SelectInterface>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006804:	2302      	movs	r3, #2
 8006806:	e131      	b.n	8006a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800680e:	2050      	movs	r0, #80	; 0x50
 8006810:	f005 f860 	bl	800b8d4 <malloc>
 8006814:	4603      	mov	r3, r0
 8006816:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	e11f      	b.n	8006a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800682c:	2250      	movs	r2, #80	; 0x50
 800682e:	2100      	movs	r1, #0
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	f005 f90b 	bl	800ba4c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	211a      	movs	r1, #26
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	b25b      	sxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	da15      	bge.n	800687a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	211a      	movs	r1, #26
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	4413      	add	r3, r2
 800685a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	211a      	movs	r1, #26
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f002 fa2a 	bl	8008cda <USBH_AllocPipe>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	7819      	ldrb	r1, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	7858      	ldrb	r0, [r3, #1]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	8952      	ldrh	r2, [r2, #10]
 80068a6:	9202      	str	r2, [sp, #8]
 80068a8:	2203      	movs	r2, #3
 80068aa:	9201      	str	r2, [sp, #4]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4623      	mov	r3, r4
 80068b0:	4602      	mov	r2, r0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f002 f9e2 	bl	8008c7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 ff81 	bl	800b7c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068c6:	2300      	movs	r3, #0
 80068c8:	2200      	movs	r2, #0
 80068ca:	210a      	movs	r1, #10
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc5c 	bl	800718a <USBH_FindInterface>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2bff      	cmp	r3, #255	; 0xff
 80068da:	d002      	beq.n	80068e2 <USBH_CDC_InterfaceInit+0x11a>
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d901      	bls.n	80068e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068e2:	2302      	movs	r3, #2
 80068e4:	e0c2      	b.n	8006a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	211a      	movs	r1, #26
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b25b      	sxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da16      	bge.n	800692c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	211a      	movs	r1, #26
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	4413      	add	r3, r2
 800690a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	211a      	movs	r1, #26
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	835a      	strh	r2, [r3, #26]
 800692a:	e015      	b.n	8006958 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	211a      	movs	r1, #26
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	211a      	movs	r1, #26
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	211a      	movs	r1, #26
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	b25b      	sxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	da16      	bge.n	800699e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	211a      	movs	r1, #26
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	211a      	movs	r1, #26
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	4413      	add	r3, r2
 8006992:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	835a      	strh	r2, [r3, #26]
 800699c:	e015      	b.n	80069ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	211a      	movs	r1, #26
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069ae:	781a      	ldrb	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	211a      	movs	r1, #26
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	7b9b      	ldrb	r3, [r3, #14]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f002 f982 	bl	8008cda <USBH_AllocPipe>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	7bdb      	ldrb	r3, [r3, #15]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f978 	bl	8008cda <USBH_AllocPipe>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	7b59      	ldrb	r1, [r3, #13]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7b98      	ldrb	r0, [r3, #14]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	8b12      	ldrh	r2, [r2, #24]
 8006a0a:	9202      	str	r2, [sp, #8]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4623      	mov	r3, r4
 8006a14:	4602      	mov	r2, r0
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 f930 	bl	8008c7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	7b19      	ldrb	r1, [r3, #12]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	7bd8      	ldrb	r0, [r3, #15]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	8b52      	ldrh	r2, [r2, #26]
 8006a34:	9202      	str	r2, [sp, #8]
 8006a36:	2202      	movs	r2, #2
 8006a38:	9201      	str	r2, [sp, #4]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 f91b 	bl	8008c7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	2200      	movs	r2, #0
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f004 feb6 	bl	800b7c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	7b1b      	ldrb	r3, [r3, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f004 feaf 	bl	800b7c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}

08006a74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f002 f910 	bl	8008cba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f93b 	bl	8008d1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	7b1b      	ldrb	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00e      	beq.n	8006ad2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	7b1b      	ldrb	r3, [r3, #12]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f002 f8fd 	bl	8008cba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	7b1b      	ldrb	r3, [r3, #12]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f002 f928 	bl	8008d1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	7b5b      	ldrb	r3, [r3, #13]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	7b5b      	ldrb	r3, [r3, #13]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 f8ea 	bl	8008cba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	7b5b      	ldrb	r3, [r3, #13]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f002 f915 	bl	8008d1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f004 fee9 	bl	800b8e4 <free>
    phost->pActiveClass->pData = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b18:	2200      	movs	r2, #0
 8006b1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3340      	adds	r3, #64	; 0x40
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8b1 	bl	8006ca6 <GetLineCoding>
 8006b44:	4603      	mov	r3, r0
 8006b46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b54:	2102      	movs	r1, #2
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d877      	bhi.n	8006c78 <USBH_CDC_Process+0x114>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBH_CDC_Process+0x2c>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006ba5 	.word	0x08006ba5
 8006b94:	08006bab 	.word	0x08006bab
 8006b98:	08006bdb 	.word	0x08006bdb
 8006b9c:	08006c4f 	.word	0x08006c4f
 8006ba0:	08006c5d 	.word	0x08006c5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba8:	e06d      	b.n	8006c86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f897 	bl	8006ce4 <SetLineCoding>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bc8:	e058      	b.n	8006c7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d055      	beq.n	8006c7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bd8:	e050      	b.n	8006c7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	3340      	adds	r3, #64	; 0x40
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f860 	bl	8006ca6 <GetLineCoding>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d126      	bne.n	8006c3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	791b      	ldrb	r3, [r3, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d13b      	bne.n	8006c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d133      	bne.n	8006c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d12b      	bne.n	8006c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d124      	bne.n	8006c80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f982 	bl	8006f40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c3c:	e020      	b.n	8006c80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d01d      	beq.n	8006c80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2204      	movs	r2, #4
 8006c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c4c:	e018      	b.n	8006c80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f867 	bl	8006d22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f8f6 	bl	8006e46 <CDC_ProcessReception>
      break;
 8006c5a:	e014      	b.n	8006c86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f98e 	bl	8007f80 <USBH_ClrFeature>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c76:	e005      	b.n	8006c84 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c78:	bf00      	nop
 8006c7a:	e004      	b.n	8006c86 <USBH_CDC_Process+0x122>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <USBH_CDC_Process+0x122>
      break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <USBH_CDC_Process+0x122>
      break;
 8006c84:	bf00      	nop

  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	22a1      	movs	r2, #161	; 0xa1
 8006cb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2221      	movs	r2, #33	; 0x21
 8006cba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2207      	movs	r2, #7
 8006ccc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fc8f 	bl	80085f8 <USBH_CtlReq>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2207      	movs	r2, #7
 8006d0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2207      	movs	r2, #7
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fc70 	bl	80085f8 <USBH_CtlReq>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af02      	add	r7, sp, #8
 8006d28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d002      	beq.n	8006d48 <CDC_ProcessTransmission+0x26>
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d023      	beq.n	8006d8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d46:	e07a      	b.n	8006e3e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	8b12      	ldrh	r2, [r2, #24]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d90b      	bls.n	8006d6c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8b1a      	ldrh	r2, [r3, #24]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	7b5b      	ldrb	r3, [r3, #13]
 8006d60:	2001      	movs	r0, #1
 8006d62:	9000      	str	r0, [sp, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 ff46 	bl	8008bf6 <USBH_BulkSendData>
 8006d6a:	e00b      	b.n	8006d84 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	7b5b      	ldrb	r3, [r3, #13]
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	9000      	str	r0, [sp, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 ff39 	bl	8008bf6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d8c:	e057      	b.n	8006e3e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	7b5b      	ldrb	r3, [r3, #13]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f004 fced 	bl	800b774 <USBH_LL_GetURBState>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d136      	bne.n	8006e12 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	8b12      	ldrh	r2, [r2, #24]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d90e      	bls.n	8006dce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	8b12      	ldrh	r2, [r2, #24]
 8006db8:	1a9a      	subs	r2, r3, r2
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	8b12      	ldrh	r2, [r2, #24]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	61da      	str	r2, [r3, #28]
 8006dcc:	e002      	b.n	8006dd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006de4:	e006      	b.n	8006df4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f892 	bl	8006f18 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2204      	movs	r2, #4
 8006df8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f002 f882 	bl	8008f14 <osMessagePut>
      break;
 8006e10:	e014      	b.n	8006e3c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d111      	bne.n	8006e3c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2204      	movs	r2, #4
 8006e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e34:	2200      	movs	r2, #0
 8006e36:	4619      	mov	r1, r3
 8006e38:	f002 f86c 	bl	8008f14 <osMessagePut>
      break;
 8006e3c:	bf00      	nop
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b086      	sub	sp, #24
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d002      	beq.n	8006e6c <CDC_ProcessReception+0x26>
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d00e      	beq.n	8006e88 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e6a:	e051      	b.n	8006f10 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	6a19      	ldr	r1, [r3, #32]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	8b5a      	ldrh	r2, [r3, #26]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	7b1b      	ldrb	r3, [r3, #12]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fee1 	bl	8008c40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2204      	movs	r2, #4
 8006e82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e86:	e043      	b.n	8006f10 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	7b1b      	ldrb	r3, [r3, #12]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f004 fc70 	bl	800b774 <USBH_LL_GetURBState>
 8006e94:	4603      	mov	r3, r0
 8006e96:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e98:	7cfb      	ldrb	r3, [r7, #19]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d137      	bne.n	8006f0e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	7b1b      	ldrb	r3, [r3, #12]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f004 fbd3 	bl	800b650 <USBH_LL_GetLastXferSize>
 8006eaa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d016      	beq.n	8006ee4 <CDC_ProcessReception+0x9e>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	8b5b      	ldrh	r3, [r3, #26]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d910      	bls.n	8006ee4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006ee2:	e006      	b.n	8006ef2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f81d 	bl	8006f2c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f06:	2200      	movs	r2, #0
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f002 f803 	bl	8008f14 <osMessagePut>
      break;
 8006f0e:	bf00      	nop
  }
}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f54:	b5b0      	push	{r4, r5, r7, lr}
 8006f56:	b090      	sub	sp, #64	; 0x40
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e04d      	b.n	8007008 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	79fa      	ldrb	r2, [r7, #7]
 8006f70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f847 	bl	8007018 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <USBH_Init+0xbc>)
 8006fba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 ff79 	bl	8008ec2 <osMessageCreate>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <USBH_Init+0xc0>)
 8006fda:	f107 0414 	add.w	r4, r7, #20
 8006fde:	461d      	mov	r5, r3
 8006fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006fec:	f107 0314 	add.w	r3, r7, #20
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 ff05 	bl	8008e02 <osThreadCreate>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f004 fa71 	bl	800b4e8 <USBH_LL_Init>

  return USBH_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3740      	adds	r7, #64	; 0x40
 800700c:	46bd      	mov	sp, r7
 800700e:	bdb0      	pop	{r4, r5, r7, pc}
 8007010:	0800bc78 	.word	0x0800bc78
 8007014:	0800bc94 	.word	0x0800bc94

08007018 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e009      	b.n	800703e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	33e0      	adds	r3, #224	; 0xe0
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b0f      	cmp	r3, #15
 8007042:	d9f2      	bls.n	800702a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e009      	b.n	800705e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007064:	d3f1      	bcc.n	800704a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2240      	movs	r2, #64	; 0x40
 800708a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	331c      	adds	r3, #28
 80070b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f004 fcc5 	bl	800ba4c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 fcbc 	bl	800ba4c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f203 3326 	addw	r3, r3, #806	; 0x326
 80070da:	2212      	movs	r2, #18
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f004 fcb4 	bl	800ba4c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070ea:	223e      	movs	r2, #62	; 0x3e
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f004 fcac 	bl	800ba4c <memset>

  return USBH_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10e      	bne.n	800713a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007122:	1c59      	adds	r1, r3, #1
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	33de      	adds	r3, #222	; 0xde
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e004      	b.n	8007144 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e001      	b.n	8007144 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	429a      	cmp	r2, r3
 800716c:	d204      	bcs.n	8007178 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	78fa      	ldrb	r2, [r7, #3]
 8007172:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007176:	e001      	b.n	800717c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	461a      	mov	r2, r3
 8007198:	4603      	mov	r3, r0
 800719a:	70fb      	strb	r3, [r7, #3]
 800719c:	460b      	mov	r3, r1
 800719e:	70bb      	strb	r3, [r7, #2]
 80071a0:	4613      	mov	r3, r2
 80071a2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071b2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071b4:	e025      	b.n	8007202 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	221a      	movs	r2, #26
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
 80071be:	3308      	adds	r3, #8
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	3302      	adds	r3, #2
 80071c6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	795b      	ldrb	r3, [r3, #5]
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d002      	beq.n	80071d8 <USBH_FindInterface+0x4e>
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	2bff      	cmp	r3, #255	; 0xff
 80071d6:	d111      	bne.n	80071fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071dc:	78ba      	ldrb	r2, [r7, #2]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d002      	beq.n	80071e8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071e2:	78bb      	ldrb	r3, [r7, #2]
 80071e4:	2bff      	cmp	r3, #255	; 0xff
 80071e6:	d109      	bne.n	80071fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ec:	787a      	ldrb	r2, [r7, #1]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d002      	beq.n	80071f8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071f2:	787b      	ldrb	r3, [r7, #1]
 80071f4:	2bff      	cmp	r3, #255	; 0xff
 80071f6:	d101      	bne.n	80071fc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	e006      	b.n	800720a <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	3301      	adds	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d9d6      	bls.n	80071b6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007208:	23ff      	movs	r3, #255	; 0xff
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f004 f99e 	bl	800b560 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007224:	2101      	movs	r1, #1
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f004 fab7 	bl	800b79a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af04      	add	r7, sp, #16
 800723e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d102      	bne.n	800725a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2203      	movs	r2, #3
 8007258:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b0b      	cmp	r3, #11
 8007262:	f200 8247 	bhi.w	80076f4 <USBH_Process+0x4bc>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <USBH_Process+0x34>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	0800729d 	.word	0x0800729d
 8007270:	080072eb 	.word	0x080072eb
 8007274:	0800736f 	.word	0x0800736f
 8007278:	08007673 	.word	0x08007673
 800727c:	080076f5 	.word	0x080076f5
 8007280:	0800742f 	.word	0x0800742f
 8007284:	080075fd 	.word	0x080075fd
 8007288:	08007481 	.word	0x08007481
 800728c:	080074bd 	.word	0x080074bd
 8007290:	080074f7 	.word	0x080074f7
 8007294:	08007555 	.word	0x08007555
 8007298:	0800765b 	.word	0x0800765b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8227 	beq.w	80076f8 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072b0:	20c8      	movs	r0, #200	; 0xc8
 80072b2:	f004 fabc 	bl	800b82e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f004 f9af 	bl	800b61a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072e0:	2200      	movs	r2, #0
 80072e2:	4619      	mov	r1, r3
 80072e4:	f001 fe16 	bl	8008f14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072e8:	e206      	b.n	80076f8 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d107      	bne.n	8007304 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e025      	b.n	8007350 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800730a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800730e:	d914      	bls.n	800733a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007316:	3301      	adds	r3, #1
 8007318:	b2da      	uxtb	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007326:	2b03      	cmp	r3, #3
 8007328:	d903      	bls.n	8007332 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	220d      	movs	r2, #13
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e00e      	b.n	8007350 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e00a      	b.n	8007350 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007340:	f103 020a 	add.w	r2, r3, #10
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800734a:	200a      	movs	r0, #10
 800734c:	f004 fa6f 	bl	800b82e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007364:	2200      	movs	r2, #0
 8007366:	4619      	mov	r1, r3
 8007368:	f001 fdd4 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800736c:	e1cb      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737e:	2104      	movs	r1, #4
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007384:	2064      	movs	r0, #100	; 0x64
 8007386:	f004 fa52 	bl	800b82e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f004 f91e 	bl	800b5cc <USBH_LL_GetSpeed>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2205      	movs	r2, #5
 800739e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80073a0:	2100      	movs	r1, #0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fc99 	bl	8008cda <USBH_AllocPipe>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 fc91 	bl	8008cda <USBH_AllocPipe>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	7919      	ldrb	r1, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073d4:	b292      	uxth	r2, r2
 80073d6:	9202      	str	r2, [sp, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	9201      	str	r2, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4603      	mov	r3, r0
 80073e0:	2280      	movs	r2, #128	; 0x80
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fc4a 	bl	8008c7c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7959      	ldrb	r1, [r3, #5]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073fc:	b292      	uxth	r2, r2
 80073fe:	9202      	str	r2, [sp, #8]
 8007400:	2200      	movs	r2, #0
 8007402:	9201      	str	r2, [sp, #4]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	4603      	mov	r3, r0
 8007408:	2200      	movs	r2, #0
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fc36 	bl	8008c7c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007424:	2200      	movs	r2, #0
 8007426:	4619      	mov	r1, r3
 8007428:	f001 fd74 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800742c:	e16b      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f96e 	bl	8007710 <USBH_HandleEnum>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 815d 	bne.w	80076fc <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007450:	2b01      	cmp	r3, #1
 8007452:	d103      	bne.n	800745c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2208      	movs	r2, #8
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2207      	movs	r2, #7
 8007460:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2205      	movs	r2, #5
 8007466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007476:	2200      	movs	r2, #0
 8007478:	4619      	mov	r1, r3
 800747a:	f001 fd4b 	bl	8008f14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800747e:	e13d      	b.n	80076fc <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 813a 	beq.w	8007700 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007492:	2101      	movs	r1, #1
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2208      	movs	r2, #8
 800749c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2205      	movs	r2, #5
 80074a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074b2:	2200      	movs	r2, #0
 80074b4:	4619      	mov	r1, r3
 80074b6:	f001 fd2d 	bl	8008f14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074ba:	e121      	b.n	8007700 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fd13 	bl	8007ef2 <USBH_SetCfg>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2209      	movs	r2, #9
 80074d6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074ec:	2200      	movs	r2, #0
 80074ee:	4619      	mov	r1, r3
 80074f0:	f001 fd10 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074f4:	e107      	b.n	8007706 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d015      	beq.n	8007530 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007504:	2101      	movs	r1, #1
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fd16 	bl	8007f38 <USBH_SetFeature>
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	220a      	movs	r2, #10
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e00a      	b.n	8007536 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b03      	cmp	r3, #3
 8007526:	d106      	bne.n	8007536 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e002      	b.n	8007536 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	220a      	movs	r2, #10
 8007534:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800754a:	2200      	movs	r2, #0
 800754c:	4619      	mov	r1, r3
 800754e:	f001 fce1 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007552:	e0d8      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800755a:	2b00      	cmp	r3, #0
 800755c:	d03f      	beq.n	80075de <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	e016      	b.n	800759a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800756c:	7bfa      	ldrb	r2, [r7, #15]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32de      	adds	r2, #222	; 0xde
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	791a      	ldrb	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800757e:	429a      	cmp	r2, r3
 8007580:	d108      	bne.n	8007594 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	32de      	adds	r2, #222	; 0xde
 8007588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007592:	e005      	b.n	80075a0 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	3301      	adds	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0e5      	beq.n	800756c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2206      	movs	r2, #6
 80075c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c8:	2103      	movs	r1, #3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	e006      	b.n	80075de <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	220d      	movs	r2, #13
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e002      	b.n	80075de <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	220d      	movs	r2, #13
 80075dc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2205      	movs	r2, #5
 80075e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075f2:	2200      	movs	r2, #0
 80075f4:	4619      	mov	r1, r3
 80075f6:	f001 fc8d 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075fa:	e084      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	220b      	movs	r2, #11
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e00a      	b.n	800763c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d106      	bne.n	800763c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220d      	movs	r2, #13
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	220d      	movs	r2, #13
 800763a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2205      	movs	r2, #5
 8007640:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	f001 fc5e 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007658:	e055      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d04f      	beq.n	8007704 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
      }
      break;
 8007670:	e048      	b.n	8007704 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fccc 	bl	8007018 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076ae:	2105      	movs	r1, #5
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d107      	bne.n	80076d0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fda4 	bl	8007216 <USBH_Start>
 80076ce:	e002      	b.n	80076d6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f003 ff45 	bl	800b560 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076ea:	2200      	movs	r2, #0
 80076ec:	4619      	mov	r1, r3
 80076ee:	f001 fc11 	bl	8008f14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076f2:	e008      	b.n	8007706 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 80076f4:	bf00      	nop
 80076f6:	e006      	b.n	8007706 <USBH_Process+0x4ce>
      break;
 80076f8:	bf00      	nop
 80076fa:	e004      	b.n	8007706 <USBH_Process+0x4ce>
      break;
 80076fc:	bf00      	nop
 80076fe:	e002      	b.n	8007706 <USBH_Process+0x4ce>
    break;
 8007700:	bf00      	nop
 8007702:	e000      	b.n	8007706 <USBH_Process+0x4ce>
      break;
 8007704:	bf00      	nop
  }
  return USBH_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800771c:	2301      	movs	r3, #1
 800771e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b07      	cmp	r3, #7
 8007726:	f200 8208 	bhi.w	8007b3a <USBH_HandleEnum+0x42a>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <USBH_HandleEnum+0x20>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007751 	.word	0x08007751
 8007734:	0800780f 	.word	0x0800780f
 8007738:	08007879 	.word	0x08007879
 800773c:	08007907 	.word	0x08007907
 8007740:	08007971 	.word	0x08007971
 8007744:	080079e1 	.word	0x080079e1
 8007748:	08007a7d 	.word	0x08007a7d
 800774c:	08007afb 	.word	0x08007afb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007750:	2108      	movs	r1, #8
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 faea 	bl	8007d2c <USBH_Get_DevDesc>
 8007758:	4603      	mov	r3, r0
 800775a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d130      	bne.n	80077c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7919      	ldrb	r1, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007786:	b292      	uxth	r2, r2
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	9201      	str	r2, [sp, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fa71 	bl	8008c7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7959      	ldrb	r1, [r3, #5]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077ae:	b292      	uxth	r2, r2
 80077b0:	9202      	str	r2, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	9201      	str	r2, [sp, #4]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4603      	mov	r3, r0
 80077ba:	2200      	movs	r2, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fa5d 	bl	8008c7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077c2:	e1bc      	b.n	8007b3e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	f040 81b9 	bne.w	8007b3e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d903      	bls.n	80077ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e1a7      	b.n	8007b3e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	795b      	ldrb	r3, [r3, #5]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fa91 	bl	8008d1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fa8b 	bl	8008d1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
      break;
 800780c:	e197      	b.n	8007b3e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800780e:	2112      	movs	r1, #18
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fa8b 	bl	8007d2c <USBH_Get_DevDesc>
 8007816:	4603      	mov	r3, r0
 8007818:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007826:	e18c      	b.n	8007b42 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b03      	cmp	r3, #3
 800782c:	f040 8189 	bne.w	8007b42 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007836:	3301      	adds	r3, #1
 8007838:	b2da      	uxtb	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007846:	2b03      	cmp	r3, #3
 8007848:	d903      	bls.n	8007852 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	220d      	movs	r2, #13
 800784e:	701a      	strb	r2, [r3, #0]
      break;
 8007850:	e177      	b.n	8007b42 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	795b      	ldrb	r3, [r3, #5]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fa5f 	bl	8008d1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fa59 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e164      	b.n	8007b42 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007878:	2101      	movs	r1, #1
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb15 	bl	8007eaa <USBH_SetAddress>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800788a:	2002      	movs	r0, #2
 800788c:	f003 ffcf 	bl	800b82e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2203      	movs	r2, #3
 800789c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7919      	ldrb	r1, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078b2:	b292      	uxth	r2, r2
 80078b4:	9202      	str	r2, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	9201      	str	r2, [sp, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4603      	mov	r3, r0
 80078be:	2280      	movs	r2, #128	; 0x80
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f9db 	bl	8008c7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7959      	ldrb	r1, [r3, #5]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078da:	b292      	uxth	r2, r2
 80078dc:	9202      	str	r2, [sp, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	2200      	movs	r2, #0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f9c7 	bl	8008c7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078ee:	e12a      	b.n	8007b46 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	f040 8127 	bne.w	8007b46 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	220d      	movs	r2, #13
 80078fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
      break;
 8007904:	e11f      	b.n	8007b46 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007906:	2109      	movs	r1, #9
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa3b 	bl	8007d84 <USBH_Get_CfgDesc>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800791e:	e114      	b.n	8007b4a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b03      	cmp	r3, #3
 8007924:	f040 8111 	bne.w	8007b4a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800792e:	3301      	adds	r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800793e:	2b03      	cmp	r3, #3
 8007940:	d903      	bls.n	800794a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	220d      	movs	r2, #13
 8007946:	701a      	strb	r2, [r3, #0]
      break;
 8007948:	e0ff      	b.n	8007b4a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f9e3 	bl	8008d1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	791b      	ldrb	r3, [r3, #4]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f9dd 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e0ec      	b.n	8007b4a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fa03 	bl	8007d84 <USBH_Get_CfgDesc>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d103      	bne.n	8007990 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2205      	movs	r2, #5
 800798c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800798e:	e0de      	b.n	8007b4e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b03      	cmp	r3, #3
 8007994:	f040 80db 	bne.w	8007b4e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d903      	bls.n	80079ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	220d      	movs	r2, #13
 80079b6:	701a      	strb	r2, [r3, #0]
      break;
 80079b8:	e0c9      	b.n	8007b4e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	795b      	ldrb	r3, [r3, #5]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f9ab 	bl	8008d1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 f9a5 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e0b6      	b.n	8007b4e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d036      	beq.n	8007a58 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079f6:	23ff      	movs	r3, #255	; 0xff
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9ed 	bl	8007dd8 <USBH_Get_StringDesc>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d111      	bne.n	8007a2c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2205      	movs	r2, #5
 8007a12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a22:	2200      	movs	r2, #0
 8007a24:	4619      	mov	r1, r3
 8007a26:	f001 fa75 	bl	8008f14 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a2a:	e092      	b.n	8007b52 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	f040 808f 	bne.w	8007b52 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2206      	movs	r2, #6
 8007a38:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4619      	mov	r1, r3
 8007a52:	f001 fa5f 	bl	8008f14 <osMessagePut>
      break;
 8007a56:	e07c      	b.n	8007b52 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2206      	movs	r2, #6
 8007a5c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a72:	2200      	movs	r2, #0
 8007a74:	4619      	mov	r1, r3
 8007a76:	f001 fa4d 	bl	8008f14 <osMessagePut>
      break;
 8007a7a:	e06a      	b.n	8007b52 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d027      	beq.n	8007ad6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a92:	23ff      	movs	r3, #255	; 0xff
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f99f 	bl	8007dd8 <USBH_Get_StringDesc>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aaa:	e054      	b.n	8007b56 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d151      	bne.n	8007b56 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2205      	movs	r2, #5
 8007abc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007acc:	2200      	movs	r2, #0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f001 fa20 	bl	8008f14 <osMessagePut>
      break;
 8007ad4:	e03f      	b.n	8007b56 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2207      	movs	r2, #7
 8007ada:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007af0:	2200      	movs	r2, #0
 8007af2:	4619      	mov	r1, r3
 8007af4:	f001 fa0e 	bl	8008f14 <osMessagePut>
      break;
 8007af8:	e02d      	b.n	8007b56 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d017      	beq.n	8007b34 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b10:	23ff      	movs	r3, #255	; 0xff
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f960 	bl	8007dd8 <USBH_Get_StringDesc>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b26:	e018      	b.n	8007b5a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d115      	bne.n	8007b5a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
      break;
 8007b32:	e012      	b.n	8007b5a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
      break;
 8007b38:	e00f      	b.n	8007b5a <USBH_HandleEnum+0x44a>

    default:
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e00e      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e00c      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b42:	bf00      	nop
 8007b44:	e00a      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b46:	bf00      	nop
 8007b48:	e008      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e006      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e004      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <USBH_HandleEnum+0x44c>
      break;
 8007b5a:	bf00      	nop
  }
  return Status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop

08007b68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f804 	bl	8007baa <USBH_HandleSof>
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b0b      	cmp	r3, #11
 8007bba:	d10a      	bne.n	8007bd2 <USBH_HandleSof+0x28>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4619      	mov	r1, r3
 8007c02:	f001 f987 	bl	8008f14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c06:	bf00      	nop
}
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c1e:	bf00      	nop
}
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4619      	mov	r1, r3
 8007c62:	f001 f957 	bl	8008f14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f003 fc80 	bl	800b596 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f83d 	bl	8008d1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	795b      	ldrb	r3, [r3, #5]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f837 	bl	8008d1c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f001 f925 	bl	8008f14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f952 	bl	8008f94 <osMessageGet>
    if (event.status == osEventMessage)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d1f2      	bne.n	8007cdc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fa9e 	bl	8007238 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007cfc:	e7ee      	b.n	8007cdc <USBH_Process_OS+0x8>

08007cfe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f001 f8f9 	bl	8008f14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3e:	d901      	bls.n	8007d44 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01b      	b.n	8007d7c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d54:	2100      	movs	r1, #0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f872 	bl	8007e40 <USBH_GetDescriptor>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d6c:	887a      	ldrh	r2, [r7, #2]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f929 	bl	8007fc8 <USBH_ParseDevDesc>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	331c      	adds	r3, #28
 8007d94:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007d96:	887b      	ldrh	r3, [r7, #2]
 8007d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9c:	d901      	bls.n	8007da2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e016      	b.n	8007dd0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007da2:	887b      	ldrh	r3, [r7, #2]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f846 	bl	8007e40 <USBH_GetDescriptor>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007dbe:	887b      	ldrh	r3, [r7, #2]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9b3 	bl	8008130 <USBH_ParseCfgDesc>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	461a      	mov	r2, r3
 8007de4:	460b      	mov	r3, r1
 8007de6:	72fb      	strb	r3, [r7, #11]
 8007de8:	4613      	mov	r3, r2
 8007dea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007dec:	893b      	ldrh	r3, [r7, #8]
 8007dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df2:	d802      	bhi.n	8007dfa <USBH_Get_StringDesc+0x22>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e01c      	b.n	8007e38 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e06:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e0e:	893b      	ldrh	r3, [r7, #8]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	460b      	mov	r3, r1
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f812 	bl	8007e40 <USBH_GetDescriptor>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e2c:	893a      	ldrh	r2, [r7, #8]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fb93 	bl	800855c <USBH_ParseStringDesc>
  }

  return status;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	72fb      	strb	r3, [r7, #11]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	789b      	ldrb	r3, [r3, #2]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d11c      	bne.n	8007e94 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2206      	movs	r2, #6
 8007e6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	893a      	ldrh	r2, [r7, #8]
 8007e70:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e72:	893b      	ldrh	r3, [r7, #8]
 8007e74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e7c:	d104      	bne.n	8007e88 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f240 4209 	movw	r2, #1033	; 0x409
 8007e84:	829a      	strh	r2, [r3, #20]
 8007e86:	e002      	b.n	8007e8e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8b3a      	ldrh	r2, [r7, #24]
 8007e92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e94:	8b3b      	ldrh	r3, [r7, #24]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fbac 	bl	80085f8 <USBH_CtlReq>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	789b      	ldrb	r3, [r3, #2]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d10f      	bne.n	8007ede <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fb88 	bl	80085f8 <USBH_CtlReq>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	789b      	ldrb	r3, [r3, #2]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d10e      	bne.n	8007f24 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2209      	movs	r2, #9
 8007f10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	887a      	ldrh	r2, [r7, #2]
 8007f16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb65 	bl	80085f8 <USBH_CtlReq>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10f      	bne.n	8007f6c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2203      	movs	r2, #3
 8007f56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb41 	bl	80085f8 <USBH_CtlReq>
 8007f76:	4603      	mov	r3, r0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	789b      	ldrb	r3, [r3, #2]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d10f      	bne.n	8007fb4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fb1d 	bl	80085f8 <USBH_CtlReq>
 8007fbe:	4603      	mov	r3, r0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007fdc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e098      	b.n	800811e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	781a      	ldrb	r2, [r3, #0]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	785a      	ldrb	r2, [r3, #1]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3302      	adds	r3, #2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b29a      	uxth	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	3303      	adds	r3, #3
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	791a      	ldrb	r2, [r3, #4]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	795a      	ldrb	r2, [r3, #5]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	799a      	ldrb	r2, [r3, #6]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	79da      	ldrb	r2, [r3, #7]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008048:	2b01      	cmp	r3, #1
 800804a:	d11b      	bne.n	8008084 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	79db      	ldrb	r3, [r3, #7]
 8008050:	2b20      	cmp	r3, #32
 8008052:	dc0f      	bgt.n	8008074 <USBH_ParseDevDesc+0xac>
 8008054:	2b08      	cmp	r3, #8
 8008056:	db0f      	blt.n	8008078 <USBH_ParseDevDesc+0xb0>
 8008058:	3b08      	subs	r3, #8
 800805a:	4a34      	ldr	r2, [pc, #208]	; (800812c <USBH_ParseDevDesc+0x164>)
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <USBH_ParseDevDesc+0xb8>
 8008072:	e001      	b.n	8008078 <USBH_ParseDevDesc+0xb0>
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d003      	beq.n	8008080 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2208      	movs	r2, #8
 800807c:	71da      	strb	r2, [r3, #7]
        break;
 800807e:	e000      	b.n	8008082 <USBH_ParseDevDesc+0xba>
        break;
 8008080:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008082:	e00e      	b.n	80080a2 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800808a:	2b02      	cmp	r3, #2
 800808c:	d107      	bne.n	800809e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	79db      	ldrb	r3, [r3, #7]
 8008092:	2b08      	cmp	r3, #8
 8008094:	d005      	beq.n	80080a2 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2208      	movs	r2, #8
 800809a:	71da      	strb	r2, [r3, #7]
 800809c:	e001      	b.n	80080a2 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800809e:	2303      	movs	r3, #3
 80080a0:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d939      	bls.n	800811c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	3308      	adds	r3, #8
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3309      	adds	r3, #9
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b29a      	uxth	r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	330a      	adds	r3, #10
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	330b      	adds	r3, #11
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	330c      	adds	r3, #12
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	330d      	adds	r3, #13
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	021b      	lsls	r3, r3, #8
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	4313      	orrs	r3, r2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	7b9a      	ldrb	r2, [r3, #14]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	7bda      	ldrb	r2, [r3, #15]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	7c1a      	ldrb	r2, [r3, #16]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	7c5a      	ldrb	r2, [r3, #17]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
}
 800811e:	4618      	mov	r0, r3
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	01000101 	.word	0x01000101

08008130 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08c      	sub	sp, #48	; 0x30
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008144:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	e0db      	b.n	800831a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	785a      	ldrb	r2, [r3, #1]
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3302      	adds	r3, #2
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	3303      	adds	r3, #3
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29b      	uxth	r3, r3
 800818e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008192:	bf28      	it	cs
 8008194:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008198:	b29a      	uxth	r2, r3
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	791a      	ldrb	r2, [r3, #4]
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	795a      	ldrb	r2, [r3, #5]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	799a      	ldrb	r2, [r3, #6]
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	79da      	ldrb	r2, [r3, #7]
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	7a1a      	ldrb	r2, [r3, #8]
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b09      	cmp	r3, #9
 80081cc:	d002      	beq.n	80081d4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	2209      	movs	r2, #9
 80081d2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	f240 809d 	bls.w	8008316 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 80081dc:	2309      	movs	r3, #9
 80081de:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081e4:	e081      	b.n	80082ea <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081e6:	f107 0316 	add.w	r3, r7, #22
 80081ea:	4619      	mov	r1, r3
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f000 f9e8 	bl	80085c2 <USBH_GetNextDesc>
 80081f2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d176      	bne.n	80082ea <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b09      	cmp	r3, #9
 8008202:	d002      	beq.n	800820a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	2209      	movs	r2, #9
 8008208:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800820a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820e:	221a      	movs	r2, #26
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	3308      	adds	r3, #8
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	4413      	add	r3, r2
 800821a:	3302      	adds	r3, #2
 800821c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800821e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008220:	69f8      	ldr	r0, [r7, #28]
 8008222:	f000 f87e 	bl	8008322 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008230:	e043      	b.n	80082ba <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008232:	f107 0316 	add.w	r3, r7, #22
 8008236:	4619      	mov	r1, r3
 8008238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823a:	f000 f9c2 	bl	80085c2 <USBH_GetNextDesc>
 800823e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b05      	cmp	r3, #5
 8008246:	d138      	bne.n	80082ba <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	795b      	ldrb	r3, [r3, #5]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d113      	bne.n	8008278 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008254:	2b02      	cmp	r3, #2
 8008256:	d003      	beq.n	8008260 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	799b      	ldrb	r3, [r3, #6]
 800825c:	2b03      	cmp	r3, #3
 800825e:	d10b      	bne.n	8008278 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	79db      	ldrb	r3, [r3, #7]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <USBH_ParseCfgDesc+0x150>
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b09      	cmp	r3, #9
 800826e:	d007      	beq.n	8008280 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2209      	movs	r2, #9
 8008274:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008276:	e003      	b.n	8008280 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	2207      	movs	r2, #7
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	e000      	b.n	8008282 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008280:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008286:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800828a:	3201      	adds	r2, #1
 800828c:	00d2      	lsls	r2, r2, #3
 800828e:	211a      	movs	r1, #26
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	4413      	add	r3, r2
 8008296:	3308      	adds	r3, #8
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	4413      	add	r3, r2
 800829c:	3304      	adds	r3, #4
 800829e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80082a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a2:	69b9      	ldr	r1, [r7, #24]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f870 	bl	800838a <USBH_ParseEPDesc>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082b4:	3301      	adds	r3, #1
 80082b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	791b      	ldrb	r3, [r3, #4]
 80082be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d204      	bcs.n	80082d0 <USBH_ParseCfgDesc+0x1a0>
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	885a      	ldrh	r2, [r3, #2]
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d8b0      	bhi.n	8008232 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082d8:	429a      	cmp	r2, r3
 80082da:	d201      	bcs.n	80082e0 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80082dc:	2303      	movs	r3, #3
 80082de:	e01c      	b.n	800831a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	3301      	adds	r3, #1
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d805      	bhi.n	80082fe <USBH_ParseCfgDesc+0x1ce>
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	885a      	ldrh	r2, [r3, #2]
 80082f6:	8afb      	ldrh	r3, [r7, #22]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	f63f af74 	bhi.w	80081e6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	2b02      	cmp	r3, #2
 8008304:	bf28      	it	cs
 8008306:	2302      	movcs	r3, #2
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800830e:	429a      	cmp	r2, r3
 8008310:	d201      	bcs.n	8008316 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008312:	2303      	movs	r3, #3
 8008314:	e001      	b.n	800831a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800831a:	4618      	mov	r0, r3
 800831c:	3730      	adds	r7, #48	; 0x30
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785a      	ldrb	r2, [r3, #1]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	789a      	ldrb	r2, [r3, #2]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	78da      	ldrb	r2, [r3, #3]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	3304      	adds	r3, #4
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b02      	cmp	r3, #2
 8008354:	bf28      	it	cs
 8008356:	2302      	movcs	r3, #2
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	795a      	ldrb	r2, [r3, #5]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	799a      	ldrb	r2, [r3, #6]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	79da      	ldrb	r2, [r3, #7]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	7a1a      	ldrb	r2, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	721a      	strb	r2, [r3, #8]
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800838a:	b480      	push	{r7}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	785a      	ldrb	r2, [r3, #1]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	789a      	ldrb	r2, [r3, #2]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	78da      	ldrb	r2, [r3, #3]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3305      	adds	r3, #5
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	021b      	lsls	r3, r3, #8
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4313      	orrs	r3, r2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	799a      	ldrb	r2, [r3, #6]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	889b      	ldrh	r3, [r3, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ee:	d804      	bhi.n	80083fa <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f8:	d901      	bls.n	80083fe <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80083fa:	2303      	movs	r3, #3
 80083fc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008404:	2b00      	cmp	r3, #0
 8008406:	d136      	bne.n	8008476 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d108      	bne.n	8008426 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	889b      	ldrh	r3, [r3, #4]
 8008418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841c:	f240 8097 	bls.w	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008420:	2303      	movs	r3, #3
 8008422:	75fb      	strb	r3, [r7, #23]
 8008424:	e093      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	78db      	ldrb	r3, [r3, #3]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d107      	bne.n	8008442 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	889b      	ldrh	r3, [r3, #4]
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	f240 8089 	bls.w	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800843c:	2303      	movs	r3, #3
 800843e:	75fb      	strb	r3, [r7, #23]
 8008440:	e085      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	78db      	ldrb	r3, [r3, #3]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b01      	cmp	r3, #1
 800844c:	d005      	beq.n	800845a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	78db      	ldrb	r3, [r3, #3]
 8008452:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008456:	2b03      	cmp	r3, #3
 8008458:	d10a      	bne.n	8008470 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	799b      	ldrb	r3, [r3, #6]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <USBH_ParseEPDesc+0xe0>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	799b      	ldrb	r3, [r3, #6]
 8008466:	2b10      	cmp	r3, #16
 8008468:	d970      	bls.n	800854c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800846a:	2303      	movs	r3, #3
 800846c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800846e:	e06d      	b.n	800854c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008470:	2303      	movs	r3, #3
 8008472:	75fb      	strb	r3, [r7, #23]
 8008474:	e06b      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800847c:	2b01      	cmp	r3, #1
 800847e:	d13c      	bne.n	80084fa <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d005      	beq.n	8008498 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	78db      	ldrb	r3, [r3, #3]
 8008490:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	889b      	ldrh	r3, [r3, #4]
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d956      	bls.n	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084a0:	2303      	movs	r3, #3
 80084a2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084a4:	e053      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d10e      	bne.n	80084d0 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	799b      	ldrb	r3, [r3, #6]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d007      	beq.n	80084ca <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80084be:	2b10      	cmp	r3, #16
 80084c0:	d803      	bhi.n	80084ca <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d941      	bls.n	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084ca:	2303      	movs	r3, #3
 80084cc:	75fb      	strb	r3, [r7, #23]
 80084ce:	e03e      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	f003 0303 	and.w	r3, r3, #3
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d10b      	bne.n	80084f4 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	799b      	ldrb	r3, [r3, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <USBH_ParseEPDesc+0x164>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	889b      	ldrh	r3, [r3, #4]
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ec:	d32f      	bcc.n	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
 80084f2:	e02c      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084f4:	2303      	movs	r3, #3
 80084f6:	75fb      	strb	r3, [r7, #23]
 80084f8:	e029      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008500:	2b02      	cmp	r3, #2
 8008502:	d120      	bne.n	8008546 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	78db      	ldrb	r3, [r3, #3]
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	889b      	ldrh	r3, [r3, #4]
 8008514:	2b08      	cmp	r3, #8
 8008516:	d01a      	beq.n	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008518:	2303      	movs	r3, #3
 800851a:	75fb      	strb	r3, [r7, #23]
 800851c:	e017      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	78db      	ldrb	r3, [r3, #3]
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	2b03      	cmp	r3, #3
 8008528:	d10a      	bne.n	8008540 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	799b      	ldrb	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <USBH_ParseEPDesc+0x1b0>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	2b08      	cmp	r3, #8
 8008538:	d909      	bls.n	800854e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e006      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008540:	2303      	movs	r3, #3
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	e003      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008546:	2303      	movs	r3, #3
 8008548:	75fb      	strb	r3, [r7, #23]
 800854a:	e000      	b.n	800854e <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800854c:	bf00      	nop
  }

  return status;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008550:	4618      	mov	r0, r3
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d120      	bne.n	80085b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	1e9a      	subs	r2, r3, #2
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	4293      	cmp	r3, r2
 800857e:	bf28      	it	cs
 8008580:	4613      	movcs	r3, r2
 8008582:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3302      	adds	r3, #2
 8008588:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800858a:	2300      	movs	r3, #0
 800858c:	82fb      	strh	r3, [r7, #22]
 800858e:	e00b      	b.n	80085a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008590:	8afb      	ldrh	r3, [r7, #22]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3301      	adds	r3, #1
 80085a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085a2:	8afb      	ldrh	r3, [r7, #22]
 80085a4:	3302      	adds	r3, #2
 80085a6:	82fb      	strh	r3, [r7, #22]
 80085a8:	8afa      	ldrh	r2, [r7, #22]
 80085aa:	8abb      	ldrh	r3, [r7, #20]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d3ef      	bcc.n	8008590 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]
  }
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	881a      	ldrh	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4413      	add	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	789b      	ldrb	r3, [r3, #2]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d002      	beq.n	8008618 <USBH_CtlReq+0x20>
 8008612:	2b02      	cmp	r3, #2
 8008614:	d01d      	beq.n	8008652 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008616:	e043      	b.n	80086a0 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2202      	movs	r2, #2
 800862e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008630:	2301      	movs	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2203      	movs	r2, #3
 8008638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008648:	2200      	movs	r2, #0
 800864a:	4619      	mov	r1, r3
 800864c:	f000 fc62 	bl	8008f14 <osMessagePut>
      break;
 8008650:	e026      	b.n	80086a0 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f82a 	bl	80086ac <USBH_HandleControl>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <USBH_CtlReq+0x70>
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d106      	bne.n	8008676 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	761a      	strb	r2, [r3, #24]
 8008674:	e005      	b.n	8008682 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d102      	bne.n	8008682 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2203      	movs	r2, #3
 8008686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008696:	2200      	movs	r2, #0
 8008698:	4619      	mov	r1, r3
 800869a:	f000 fc3b 	bl	8008f14 <osMessagePut>
      break;
 800869e:	bf00      	nop
  }
  return status;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7e1b      	ldrb	r3, [r3, #24]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	f200 8229 	bhi.w	8008b1a <USBH_HandleControl+0x46e>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <USBH_HandleControl+0x24>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086fd 	.word	0x080086fd
 80086d4:	08008717 	.word	0x08008717
 80086d8:	080087b9 	.word	0x080087b9
 80086dc:	080087df 	.word	0x080087df
 80086e0:	0800886b 	.word	0x0800886b
 80086e4:	08008895 	.word	0x08008895
 80086e8:	08008957 	.word	0x08008957
 80086ec:	08008979 	.word	0x08008979
 80086f0:	08008a0b 	.word	0x08008a0b
 80086f4:	08008a31 	.word	0x08008a31
 80086f8:	08008ac3 	.word	0x08008ac3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f103 0110 	add.w	r1, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	461a      	mov	r2, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fa17 	bl	8008b3c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	761a      	strb	r2, [r3, #24]
      break;
 8008714:	e20c      	b.n	8008b30 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f003 f829 	bl	800b774 <USBH_LL_GetURBState>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d12c      	bne.n	8008786 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7c1b      	ldrb	r3, [r3, #16]
 8008730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008734:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8adb      	ldrh	r3, [r3, #22]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800873e:	7b7b      	ldrb	r3, [r7, #13]
 8008740:	2b80      	cmp	r3, #128	; 0x80
 8008742:	d103      	bne.n	800874c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2203      	movs	r2, #3
 8008748:	761a      	strb	r2, [r3, #24]
 800874a:	e00d      	b.n	8008768 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2205      	movs	r2, #5
 8008750:	761a      	strb	r2, [r3, #24]
 8008752:	e009      	b.n	8008768 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008754:	7b7b      	ldrb	r3, [r7, #13]
 8008756:	2b80      	cmp	r3, #128	; 0x80
 8008758:	d103      	bne.n	8008762 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2209      	movs	r2, #9
 800875e:	761a      	strb	r2, [r3, #24]
 8008760:	e002      	b.n	8008768 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2207      	movs	r2, #7
 8008766:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2203      	movs	r2, #3
 800876c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800877c:	2200      	movs	r2, #0
 800877e:	4619      	mov	r1, r3
 8008780:	f000 fbc8 	bl	8008f14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008784:	e1cb      	b.n	8008b1e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b04      	cmp	r3, #4
 800878a:	d003      	beq.n	8008794 <USBH_HandleControl+0xe8>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b02      	cmp	r3, #2
 8008790:	f040 81c5 	bne.w	8008b1e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	220b      	movs	r2, #11
 8008798:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2203      	movs	r2, #3
 800879e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087ae:	2200      	movs	r2, #0
 80087b0:	4619      	mov	r1, r3
 80087b2:	f000 fbaf 	bl	8008f14 <osMessagePut>
      break;
 80087b6:	e1b2      	b.n	8008b1e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6899      	ldr	r1, [r3, #8]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	899a      	ldrh	r2, [r3, #12]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	791b      	ldrb	r3, [r3, #4]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9f2 	bl	8008bba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2204      	movs	r2, #4
 80087da:	761a      	strb	r2, [r3, #24]
      break;
 80087dc:	e1a8      	b.n	8008b30 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f002 ffc5 	bl	800b774 <USBH_LL_GetURBState>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d110      	bne.n	8008816 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2209      	movs	r2, #9
 80087f8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2203      	movs	r2, #3
 80087fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800880e:	2200      	movs	r2, #0
 8008810:	4619      	mov	r1, r3
 8008812:	f000 fb7f 	bl	8008f14 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b05      	cmp	r3, #5
 800881a:	d110      	bne.n	800883e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800881c:	2303      	movs	r3, #3
 800881e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2203      	movs	r2, #3
 8008824:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008834:	2200      	movs	r2, #0
 8008836:	4619      	mov	r1, r3
 8008838:	f000 fb6c 	bl	8008f14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800883c:	e171      	b.n	8008b22 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b04      	cmp	r3, #4
 8008842:	f040 816e 	bne.w	8008b22 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	220b      	movs	r2, #11
 800884a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2203      	movs	r2, #3
 8008850:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008860:	2200      	movs	r2, #0
 8008862:	4619      	mov	r1, r3
 8008864:	f000 fb56 	bl	8008f14 <osMessagePut>
      break;
 8008868:	e15b      	b.n	8008b22 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6899      	ldr	r1, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	899a      	ldrh	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	795b      	ldrb	r3, [r3, #5]
 8008876:	2001      	movs	r0, #1
 8008878:	9000      	str	r0, [sp, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f978 	bl	8008b70 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2206      	movs	r2, #6
 8008890:	761a      	strb	r2, [r3, #24]
      break;
 8008892:	e14d      	b.n	8008b30 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	795b      	ldrb	r3, [r3, #5]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f002 ff6a 	bl	800b774 <USBH_LL_GetURBState>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d111      	bne.n	80088ce <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2207      	movs	r2, #7
 80088ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2203      	movs	r2, #3
 80088b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088c4:	2200      	movs	r2, #0
 80088c6:	4619      	mov	r1, r3
 80088c8:	f000 fb24 	bl	8008f14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088cc:	e12b      	b.n	8008b26 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	d113      	bne.n	80088fc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	220c      	movs	r2, #12
 80088d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088da:	2303      	movs	r3, #3
 80088dc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2203      	movs	r2, #3
 80088e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088f2:	2200      	movs	r2, #0
 80088f4:	4619      	mov	r1, r3
 80088f6:	f000 fb0d 	bl	8008f14 <osMessagePut>
      break;
 80088fa:	e114      	b.n	8008b26 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d111      	bne.n	8008926 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2205      	movs	r2, #5
 8008906:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2203      	movs	r2, #3
 800890c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800891c:	2200      	movs	r2, #0
 800891e:	4619      	mov	r1, r3
 8008920:	f000 faf8 	bl	8008f14 <osMessagePut>
      break;
 8008924:	e0ff      	b.n	8008b26 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b04      	cmp	r3, #4
 800892a:	f040 80fc 	bne.w	8008b26 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	220b      	movs	r2, #11
 8008932:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008934:	2302      	movs	r3, #2
 8008936:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2203      	movs	r2, #3
 800893c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800894c:	2200      	movs	r2, #0
 800894e:	4619      	mov	r1, r3
 8008950:	f000 fae0 	bl	8008f14 <osMessagePut>
      break;
 8008954:	e0e7      	b.n	8008b26 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	791b      	ldrb	r3, [r3, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f92b 	bl	8008bba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2208      	movs	r2, #8
 8008974:	761a      	strb	r2, [r3, #24]

      break;
 8008976:	e0db      	b.n	8008b30 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	791b      	ldrb	r3, [r3, #4]
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f002 fef8 	bl	800b774 <USBH_LL_GetURBState>
 8008984:	4603      	mov	r3, r0
 8008986:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d113      	bne.n	80089b6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	220d      	movs	r2, #13
 8008992:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2203      	movs	r2, #3
 800899c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089ac:	2200      	movs	r2, #0
 80089ae:	4619      	mov	r1, r3
 80089b0:	f000 fab0 	bl	8008f14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089b4:	e0b9      	b.n	8008b2a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d111      	bne.n	80089e0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	220b      	movs	r2, #11
 80089c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2203      	movs	r2, #3
 80089c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089d6:	2200      	movs	r2, #0
 80089d8:	4619      	mov	r1, r3
 80089da:	f000 fa9b 	bl	8008f14 <osMessagePut>
      break;
 80089de:	e0a4      	b.n	8008b2a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	f040 80a1 	bne.w	8008b2a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80089e8:	2303      	movs	r3, #3
 80089ea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2203      	movs	r2, #3
 80089f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a00:	2200      	movs	r2, #0
 8008a02:	4619      	mov	r1, r3
 8008a04:	f000 fa86 	bl	8008f14 <osMessagePut>
      break;
 8008a08:	e08f      	b.n	8008b2a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	795b      	ldrb	r3, [r3, #5]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	9200      	str	r2, [sp, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8aa 	bl	8008b70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	220a      	movs	r2, #10
 8008a2c:	761a      	strb	r2, [r3, #24]
      break;
 8008a2e:	e07f      	b.n	8008b30 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	795b      	ldrb	r3, [r3, #5]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f002 fe9c 	bl	800b774 <USBH_LL_GetURBState>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d113      	bne.n	8008a6e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	220d      	movs	r2, #13
 8008a4e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2203      	movs	r2, #3
 8008a54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a64:	2200      	movs	r2, #0
 8008a66:	4619      	mov	r1, r3
 8008a68:	f000 fa54 	bl	8008f14 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a6c:	e05f      	b.n	8008b2e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d111      	bne.n	8008a98 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2209      	movs	r2, #9
 8008a78:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4619      	mov	r1, r3
 8008a92:	f000 fa3f 	bl	8008f14 <osMessagePut>
      break;
 8008a96:	e04a      	b.n	8008b2e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d147      	bne.n	8008b2e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	220b      	movs	r2, #11
 8008aa2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2203      	movs	r2, #3
 8008aa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4619      	mov	r1, r3
 8008abc:	f000 fa2a 	bl	8008f14 <osMessagePut>
      break;
 8008ac0:	e035      	b.n	8008b2e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7e5b      	ldrb	r3, [r3, #25]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	765a      	strb	r2, [r3, #25]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7e5b      	ldrb	r3, [r3, #25]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d806      	bhi.n	8008ae4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ae2:	e025      	b.n	8008b30 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aea:	2106      	movs	r1, #6
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f90d 	bl	8008d1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	791b      	ldrb	r3, [r3, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f907 	bl	8008d1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b14:	2302      	movs	r3, #2
 8008b16:	73fb      	strb	r3, [r7, #15]
      break;
 8008b18:	e00a      	b.n	8008b30 <USBH_HandleControl+0x484>

    default:
      break;
 8008b1a:	bf00      	nop
 8008b1c:	e008      	b.n	8008b30 <USBH_HandleControl+0x484>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e006      	b.n	8008b30 <USBH_HandleControl+0x484>
      break;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <USBH_HandleControl+0x484>
      break;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <USBH_HandleControl+0x484>
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <USBH_HandleControl+0x484>
      break;
 8008b2e:	bf00      	nop
  }

  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b4a:	79f9      	ldrb	r1, [r7, #7]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	2308      	movs	r3, #8
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f002 fdd6 	bl	800b712 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	460b      	mov	r3, r1
 8008b80:	80fb      	strh	r3, [r7, #6]
 8008b82:	4613      	mov	r3, r2
 8008b84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b94:	7979      	ldrb	r1, [r7, #5]
 8008b96:	7e3b      	ldrb	r3, [r7, #24]
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	9302      	str	r3, [sp, #8]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f002 fdb1 	bl	800b712 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b088      	sub	sp, #32
 8008bbe:	af04      	add	r7, sp, #16
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	460b      	mov	r3, r1
 8008bca:	80fb      	strh	r3, [r7, #6]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bd0:	7979      	ldrb	r1, [r7, #5]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9303      	str	r3, [sp, #12]
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	9302      	str	r3, [sp, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	2301      	movs	r3, #1
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	2300      	movs	r3, #0
 8008be4:	2201      	movs	r2, #1
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f002 fd93 	bl	800b712 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bec:	2300      	movs	r3, #0

}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b088      	sub	sp, #32
 8008bfa:	af04      	add	r7, sp, #16
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4611      	mov	r1, r2
 8008c02:	461a      	mov	r2, r3
 8008c04:	460b      	mov	r3, r1
 8008c06:	80fb      	strh	r3, [r7, #6]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c1a:	7979      	ldrb	r1, [r7, #5]
 8008c1c:	7e3b      	ldrb	r3, [r7, #24]
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	9302      	str	r3, [sp, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f002 fd6e 	bl	800b712 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	460b      	mov	r3, r1
 8008c50:	80fb      	strh	r3, [r7, #6]
 8008c52:	4613      	mov	r3, r2
 8008c54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c56:	7979      	ldrb	r1, [r7, #5]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	2301      	movs	r3, #1
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f002 fd50 	bl	800b712 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af04      	add	r7, sp, #16
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	70fb      	strb	r3, [r7, #3]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70bb      	strb	r3, [r7, #2]
 8008c92:	4613      	mov	r3, r2
 8008c94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c96:	7878      	ldrb	r0, [r7, #1]
 8008c98:	78ba      	ldrb	r2, [r7, #2]
 8008c9a:	78f9      	ldrb	r1, [r7, #3]
 8008c9c:	8b3b      	ldrh	r3, [r7, #24]
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	7d3b      	ldrb	r3, [r7, #20]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	7c3b      	ldrb	r3, [r7, #16]
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4603      	mov	r3, r0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f002 fce3 	bl	800b676 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fd02 	bl	800b6d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f836 	bl	8008d58 <USBH_GetFreePipe>
 8008cec:	4603      	mov	r3, r0
 8008cee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008cf0:	89fb      	ldrh	r3, [r7, #14]
 8008cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00a      	beq.n	8008d10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	89fb      	ldrh	r3, [r7, #14]
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	33e0      	adds	r3, #224	; 0xe0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	b2db      	uxtb	r3, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	d80d      	bhi.n	8008d4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	33e0      	adds	r3, #224	; 0xe0
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	33e0      	adds	r3, #224	; 0xe0
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	e00f      	b.n	8008d8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	33e0      	adds	r3, #224	; 0xe0
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	e007      	b.n	8008d94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	3301      	adds	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b0f      	cmp	r3, #15
 8008d8e:	d9ec      	bls.n	8008d6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008db2:	2b84      	cmp	r3, #132	; 0x84
 8008db4:	d005      	beq.n	8008dc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3303      	adds	r3, #3
 8008dc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd6:	f3ef 8305 	mrs	r3, IPSR
 8008dda:	607b      	str	r3, [r7, #4]
  return(result);
 8008ddc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bf14      	ite	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	2300      	moveq	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008df8:	f001 f916 	bl	800a028 <vTaskStartScheduler>
  
  return osOK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e04:	b089      	sub	sp, #36	; 0x24
 8008e06:	af04      	add	r7, sp, #16
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d020      	beq.n	8008e56 <osThreadCreate+0x54>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01c      	beq.n	8008e56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685c      	ldr	r4, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691e      	ldr	r6, [r3, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff ffb6 	bl	8008da0 <makeFreeRtosPriority>
 8008e34:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e3e:	9202      	str	r2, [sp, #8]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	9100      	str	r1, [sp, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	4632      	mov	r2, r6
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 ff0e 	bl	8009c6c <xTaskCreateStatic>
 8008e50:	4603      	mov	r3, r0
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e01c      	b.n	8008e90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685c      	ldr	r4, [r3, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e62:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff ff98 	bl	8008da0 <makeFreeRtosPriority>
 8008e70:	4602      	mov	r2, r0
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	9200      	str	r2, [sp, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 ff50 	bl	8009d26 <xTaskCreate>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d001      	beq.n	8008e90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e000      	b.n	8008e92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e90:	68fb      	ldr	r3, [r7, #12]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <osDelay+0x16>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e000      	b.n	8008eb2 <osDelay+0x18>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 f884 	bl	8009fc0 <vTaskDelay>
  
  return osOK;
 8008eb8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008ec2:	b590      	push	{r4, r7, lr}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af02      	add	r7, sp, #8
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d011      	beq.n	8008ef8 <osMessageCreate+0x36>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00d      	beq.n	8008ef8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6859      	ldr	r1, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2400      	movs	r4, #0
 8008eee:	9400      	str	r4, [sp, #0]
 8008ef0:	f000 f9e0 	bl	80092b4 <xQueueGenericCreateStatic>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	e008      	b.n	8008f0a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	4619      	mov	r1, r3
 8008f04:	f000 fa4e 	bl	80093a4 <xQueueGenericCreate>
 8008f08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}
	...

08008f14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <osMessagePut+0x1e>
    ticks = 1;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008f32:	f7ff ff4d 	bl	8008dd0 <inHandlerMode>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d018      	beq.n	8008f6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008f3c:	f107 0210 	add.w	r2, r7, #16
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	2300      	movs	r3, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fb84 	bl	8009654 <xQueueGenericSendFromISR>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d001      	beq.n	8008f56 <osMessagePut+0x42>
      return osErrorOS;
 8008f52:	23ff      	movs	r3, #255	; 0xff
 8008f54:	e018      	b.n	8008f88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d014      	beq.n	8008f86 <osMessagePut+0x72>
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <osMessagePut+0x7c>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	e00b      	b.n	8008f86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008f6e:	f107 0108 	add.w	r1, r7, #8
 8008f72:	2300      	movs	r3, #0
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fa6e 	bl	8009458 <xQueueGenericSend>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d001      	beq.n	8008f86 <osMessagePut+0x72>
      return osErrorOS;
 8008f82:	23ff      	movs	r3, #255	; 0xff
 8008f84:	e000      	b.n	8008f88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b08b      	sub	sp, #44	; 0x2c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	617b      	str	r3, [r7, #20]
    return event;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	f107 0314 	add.w	r3, r7, #20
 8008fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fc2:	e054      	b.n	800906e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd2:	d103      	bne.n	8008fdc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	e009      	b.n	8008ff0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d006      	beq.n	8008ff0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <osMessageGet+0x5c>
      ticks = 1;
 8008fec:	2301      	movs	r3, #1
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008ff0:	f7ff feee 	bl	8008dd0 <inHandlerMode>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01c      	beq.n	8009034 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008ffa:	f107 0220 	add.w	r2, r7, #32
 8008ffe:	f107 0314 	add.w	r3, r7, #20
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	68b8      	ldr	r0, [r7, #8]
 8009008:	f000 fca0 	bl	800994c <xQueueReceiveFromISR>
 800900c:	4603      	mov	r3, r0
 800900e:	2b01      	cmp	r3, #1
 8009010:	d102      	bne.n	8009018 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009012:	2310      	movs	r3, #16
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e001      	b.n	800901c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01d      	beq.n	800905e <osMessageGet+0xca>
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <osMessageGet+0xe4>)
 8009024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	e014      	b.n	800905e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	3304      	adds	r3, #4
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	4619      	mov	r1, r3
 800903e:	68b8      	ldr	r0, [r7, #8]
 8009040:	f000 fba4 	bl	800978c <xQueueReceive>
 8009044:	4603      	mov	r3, r0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d102      	bne.n	8009050 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800904a:	2310      	movs	r3, #16
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	e006      	b.n	800905e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <osMessageGet+0xc6>
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <osMessageGet+0xc8>
 800905a:	2340      	movs	r3, #64	; 0x40
 800905c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	461c      	mov	r4, r3
 8009062:	f107 0314 	add.w	r3, r7, #20
 8009066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800906a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	372c      	adds	r7, #44	; 0x2c
 8009072:	46bd      	mov	sp, r7
 8009074:	bd90      	pop	{r4, r7, pc}
 8009076:	bf00      	nop
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0208 	add.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f103 0208 	add.w	r2, r3, #8
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f103 0208 	add.w	r2, r3, #8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d103      	bne.n	800913e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	e00c      	b.n	8009158 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3308      	adds	r3, #8
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e002      	b.n	800914c <vListInsert+0x2e>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	429a      	cmp	r2, r3
 8009156:	d2f6      	bcs.n	8009146 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6892      	ldr	r2, [r2, #8]
 80091a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6852      	ldr	r2, [r2, #4]
 80091b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d103      	bne.n	80091c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	1e5a      	subs	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800920e:	f001 fd51 	bl	800acb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	441a      	add	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	3b01      	subs	r3, #1
 8009240:	68f9      	ldr	r1, [r7, #12]
 8009242:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	441a      	add	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	22ff      	movs	r2, #255	; 0xff
 8009252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d114      	bne.n	800928e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01a      	beq.n	80092a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f92b 	bl	800a4cc <xTaskRemoveFromEventList>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d012      	beq.n	80092a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <xQueueGenericReset+0xcc>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	e009      	b.n	80092a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3310      	adds	r3, #16
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fef2 	bl	800907c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff feed 	bl	800907c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092a2:	f001 fd37 	bl	800ad14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092a6:	2301      	movs	r3, #1
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	; 0x38
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <xQueueGenericCreateStatic+0x52>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <xQueueGenericCreateStatic+0x56>
 8009306:	2301      	movs	r3, #1
 8009308:	e000      	b.n	800930c <xQueueGenericCreateStatic+0x58>
 800930a:	2300      	movs	r3, #0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	623b      	str	r3, [r7, #32]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <xQueueGenericCreateStatic+0x7e>
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueGenericCreateStatic+0x82>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueGenericCreateStatic+0x84>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61fb      	str	r3, [r7, #28]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009352:	2348      	movs	r3, #72	; 0x48
 8009354:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b48      	cmp	r3, #72	; 0x48
 800935a:	d00a      	beq.n	8009372 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	61bb      	str	r3, [r7, #24]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009372:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00d      	beq.n	800939a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009386:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4613      	mov	r3, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f83f 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800939c:	4618      	mov	r0, r3
 800939e:	3730      	adds	r7, #48	; 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	613b      	str	r3, [r7, #16]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3348      	adds	r3, #72	; 0x48
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 fd8b 	bl	800aef8 <pvPortMalloc>
 80093e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d011      	beq.n	800940e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	3348      	adds	r3, #72	; 0x48
 80093f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f805 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800940e:	69bb      	ldr	r3, [r7, #24]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	3720      	adds	r7, #32
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	e002      	b.n	800943a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009446:	2101      	movs	r1, #1
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f7ff fecb 	bl	80091e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08e      	sub	sp, #56	; 0x38
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009466:	2300      	movs	r3, #0
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueGenericSend+0x32>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d103      	bne.n	8009498 <xQueueGenericSend+0x40>
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <xQueueGenericSend+0x44>
 8009498:	2301      	movs	r3, #1
 800949a:	e000      	b.n	800949e <xQueueGenericSend+0x46>
 800949c:	2300      	movs	r3, #0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <xQueueGenericSend+0x60>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x6e>
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <xQueueGenericSend+0x72>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <xQueueGenericSend+0x74>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	623b      	str	r3, [r7, #32]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e6:	f001 f9b1 	bl	800a84c <xTaskGetSchedulerState>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <xQueueGenericSend+0x9e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <xQueueGenericSend+0xa2>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <xQueueGenericSend+0xa4>
 80094fa:	2300      	movs	r3, #0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xQueueGenericSend+0xbe>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	61fb      	str	r3, [r7, #28]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009516:	f001 fbcd 	bl	800acb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	429a      	cmp	r2, r3
 8009524:	d302      	bcc.n	800952c <xQueueGenericSend+0xd4>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d129      	bne.n	8009580 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009532:	f000 fa8b 	bl	8009a4c <prvCopyDataToQueue>
 8009536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d010      	beq.n	8009562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	4618      	mov	r0, r3
 8009546:	f000 ffc1 	bl	800a4cc <xTaskRemoveFromEventList>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d013      	beq.n	8009578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009550:	4b3f      	ldr	r3, [pc, #252]	; (8009650 <xQueueGenericSend+0x1f8>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	e00a      	b.n	8009578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009568:	4b39      	ldr	r3, [pc, #228]	; (8009650 <xQueueGenericSend+0x1f8>)
 800956a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009578:	f001 fbcc 	bl	800ad14 <vPortExitCritical>
				return pdPASS;
 800957c:	2301      	movs	r3, #1
 800957e:	e063      	b.n	8009648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d103      	bne.n	800958e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009586:	f001 fbc5 	bl	800ad14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800958a:	2300      	movs	r3, #0
 800958c:	e05c      	b.n	8009648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fff9 	bl	800a590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800959e:	2301      	movs	r3, #1
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a2:	f001 fbb7 	bl	800ad14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a6:	f000 fda9 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095aa:	f001 fb83 	bl	800acb4 <vPortEnterCritical>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b4:	b25b      	sxtb	r3, r3
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ba:	d103      	bne.n	80095c4 <xQueueGenericSend+0x16c>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d103      	bne.n	80095da <xQueueGenericSend+0x182>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095da:	f001 fb9b 	bl	800ad14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095de:	1d3a      	adds	r2, r7, #4
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 ffe8 	bl	800a5bc <xTaskCheckForTimeOut>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d124      	bne.n	800963c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f4:	f000 fb22 	bl	8009c3c <prvIsQueueFull>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d018      	beq.n	8009630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	3310      	adds	r3, #16
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f000 ff3c 	bl	800a484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800960c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800960e:	f000 faad 	bl	8009b6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009612:	f000 fd81 	bl	800a118 <xTaskResumeAll>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f47f af7c 	bne.w	8009516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <xQueueGenericSend+0x1f8>)
 8009620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	e772      	b.n	8009516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009632:	f000 fa9b 	bl	8009b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009636:	f000 fd6f 	bl	800a118 <xTaskResumeAll>
 800963a:	e76c      	b.n	8009516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800963c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800963e:	f000 fa95 	bl	8009b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009642:	f000 fd69 	bl	800a118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009648:	4618      	mov	r0, r3
 800964a:	3738      	adds	r7, #56	; 0x38
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b090      	sub	sp, #64	; 0x40
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <xQueueGenericSendFromISR+0x3c>
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <xQueueGenericSendFromISR+0x40>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <xQueueGenericSendFromISR+0x42>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d103      	bne.n	80096be <xQueueGenericSendFromISR+0x6a>
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <xQueueGenericSendFromISR+0x6e>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <xQueueGenericSendFromISR+0x70>
 80096c2:	2300      	movs	r3, #0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	623b      	str	r3, [r7, #32]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096de:	f001 fbcb 	bl	800ae78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096e2:	f3ef 8211 	mrs	r2, BASEPRI
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	61fa      	str	r2, [r7, #28]
 80096f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	429a      	cmp	r2, r3
 8009708:	d302      	bcc.n	8009710 <xQueueGenericSendFromISR+0xbc>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d12f      	bne.n	8009770 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009726:	f000 f991 	bl	8009a4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800972a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d112      	bne.n	800975a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	2b00      	cmp	r3, #0
 800973a:	d016      	beq.n	800976a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	3324      	adds	r3, #36	; 0x24
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fec3 	bl	800a4cc <xTaskRemoveFromEventList>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	e007      	b.n	800976a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800975a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800975e:	3301      	adds	r3, #1
 8009760:	b2db      	uxtb	r3, r3
 8009762:	b25a      	sxtb	r2, r3
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800976a:	2301      	movs	r3, #1
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800976e:	e001      	b.n	8009774 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009776:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800977e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009782:	4618      	mov	r0, r3
 8009784:	3740      	adds	r7, #64	; 0x40
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08c      	sub	sp, #48	; 0x30
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009798:	2300      	movs	r3, #0
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <xQueueReceive+0x30>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	623b      	str	r3, [r7, #32]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <xQueueReceive+0x3e>
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <xQueueReceive+0x42>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <xQueueReceive+0x44>
 80097ce:	2300      	movs	r3, #0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xQueueReceive+0x5e>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	61fb      	str	r3, [r7, #28]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ea:	f001 f82f 	bl	800a84c <xTaskGetSchedulerState>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <xQueueReceive+0x6e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <xQueueReceive+0x72>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <xQueueReceive+0x74>
 80097fe:	2300      	movs	r3, #0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <xQueueReceive+0x8e>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	61bb      	str	r3, [r7, #24]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800981a:	f001 fa4b 	bl	800acb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d01f      	beq.n	800986a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982e:	f000 f977 	bl	8009b20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	1e5a      	subs	r2, r3, #1
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00f      	beq.n	8009862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	3310      	adds	r3, #16
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fe40 	bl	800a4cc <xTaskRemoveFromEventList>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009852:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <xQueueReceive+0x1bc>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009862:	f001 fa57 	bl	800ad14 <vPortExitCritical>
				return pdPASS;
 8009866:	2301      	movs	r3, #1
 8009868:	e069      	b.n	800993e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009870:	f001 fa50 	bl	800ad14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009874:	2300      	movs	r3, #0
 8009876:	e062      	b.n	800993e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d106      	bne.n	800988c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fe84 	bl	800a590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009888:	2301      	movs	r3, #1
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800988c:	f001 fa42 	bl	800ad14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009890:	f000 fc34 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009894:	f001 fa0e 	bl	800acb4 <vPortEnterCritical>
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800989e:	b25b      	sxtb	r3, r3
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d103      	bne.n	80098ae <xQueueReceive+0x122>
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098b4:	b25b      	sxtb	r3, r3
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d103      	bne.n	80098c4 <xQueueReceive+0x138>
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098c4:	f001 fa26 	bl	800ad14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c8:	1d3a      	adds	r2, r7, #4
 80098ca:	f107 0310 	add.w	r3, r7, #16
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fe73 	bl	800a5bc <xTaskCheckForTimeOut>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d123      	bne.n	8009924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098de:	f000 f997 	bl	8009c10 <prvIsQueueEmpty>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d017      	beq.n	8009918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	3324      	adds	r3, #36	; 0x24
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fdc7 	bl	800a484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f8:	f000 f938 	bl	8009b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098fc:	f000 fc0c 	bl	800a118 <xTaskResumeAll>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d189      	bne.n	800981a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009906:	4b10      	ldr	r3, [pc, #64]	; (8009948 <xQueueReceive+0x1bc>)
 8009908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	e780      	b.n	800981a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991a:	f000 f927 	bl	8009b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800991e:	f000 fbfb 	bl	800a118 <xTaskResumeAll>
 8009922:	e77a      	b.n	800981a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009926:	f000 f921 	bl	8009b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800992a:	f000 fbf5 	bl	800a118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800992e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009930:	f000 f96e 	bl	8009c10 <prvIsQueueEmpty>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	f43f af6f 	beq.w	800981a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800993c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	; 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08e      	sub	sp, #56	; 0x38
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	623b      	str	r3, [r7, #32]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d103      	bne.n	8009986 <xQueueReceiveFromISR+0x3a>
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <xQueueReceiveFromISR+0x3e>
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <xQueueReceiveFromISR+0x40>
 800998a:	2300      	movs	r3, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	61fb      	str	r3, [r7, #28]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099a6:	f001 fa67 	bl	800ae78 <vPortValidateInterruptPriority>
	__asm volatile
 80099aa:	f3ef 8211 	mrs	r2, BASEPRI
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	61ba      	str	r2, [r7, #24]
 80099c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80099c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d02f      	beq.n	8009a32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099dc:	68b9      	ldr	r1, [r7, #8]
 80099de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099e0:	f000 f89e 	bl	8009b20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	1e5a      	subs	r2, r3, #1
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d112      	bne.n	8009a1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d016      	beq.n	8009a2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	3310      	adds	r3, #16
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fd62 	bl	800a4cc <xTaskRemoveFromEventList>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e007      	b.n	8009a2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a20:	3301      	adds	r3, #1
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	b25a      	sxtb	r2, r3
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a30:	e001      	b.n	8009a36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	637b      	str	r3, [r7, #52]	; 0x34
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f383 8811 	msr	BASEPRI, r3
}
 8009a40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3738      	adds	r7, #56	; 0x38
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10d      	bne.n	8009a86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d14d      	bne.n	8009b0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 ff06 	bl	800a888 <xTaskPriorityDisinherit>
 8009a7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	e043      	b.n	8009b0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d119      	bne.n	8009ac0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6858      	ldr	r0, [r3, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a94:	461a      	mov	r2, r3
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	f002 f872 	bl	800bb80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	441a      	add	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d32b      	bcc.n	8009b0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	e026      	b.n	8009b0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	68d8      	ldr	r0, [r3, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac8:	461a      	mov	r2, r3
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	f002 f858 	bl	800bb80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	425b      	negs	r3, r3
 8009ada:	441a      	add	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d207      	bcs.n	8009afc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	425b      	negs	r3, r3
 8009af6:	441a      	add	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d105      	bne.n	8009b0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d018      	beq.n	8009b64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	441a      	add	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d303      	bcc.n	8009b54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68d9      	ldr	r1, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6838      	ldr	r0, [r7, #0]
 8009b60:	f002 f80e 	bl	800bb80 <memcpy>
	}
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b74:	f001 f89e 	bl	800acb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b80:	e011      	b.n	8009ba6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d012      	beq.n	8009bb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3324      	adds	r3, #36	; 0x24
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fc9c 	bl	800a4cc <xTaskRemoveFromEventList>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b9a:	f000 fd71 	bl	800a680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dce9      	bgt.n	8009b82 <prvUnlockQueue+0x16>
 8009bae:	e000      	b.n	8009bb2 <prvUnlockQueue+0x46>
					break;
 8009bb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	22ff      	movs	r2, #255	; 0xff
 8009bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bba:	f001 f8ab 	bl	800ad14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bbe:	f001 f879 	bl	800acb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bca:	e011      	b.n	8009bf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d012      	beq.n	8009bfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3310      	adds	r3, #16
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fc77 	bl	800a4cc <xTaskRemoveFromEventList>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009be4:	f000 fd4c 	bl	800a680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dce9      	bgt.n	8009bcc <prvUnlockQueue+0x60>
 8009bf8:	e000      	b.n	8009bfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c04:	f001 f886 	bl	800ad14 <vPortExitCritical>
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c18:	f001 f84c 	bl	800acb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e001      	b.n	8009c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c2e:	f001 f871 	bl	800ad14 <vPortExitCritical>

	return xReturn;
 8009c32:	68fb      	ldr	r3, [r7, #12]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c44:	f001 f836 	bl	800acb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d102      	bne.n	8009c5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e001      	b.n	8009c5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c5e:	f001 f859 	bl	800ad14 <vPortExitCritical>

	return xReturn;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	; 0x38
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	623b      	str	r3, [r7, #32]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10a      	bne.n	8009cb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	61fb      	str	r3, [r7, #28]
}
 8009cae:	bf00      	nop
 8009cb0:	e7fe      	b.n	8009cb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cb2:	23a0      	movs	r3, #160	; 0xa0
 8009cb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2ba0      	cmp	r3, #160	; 0xa0
 8009cba:	d00a      	beq.n	8009cd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	61bb      	str	r3, [r7, #24]
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d01e      	beq.n	8009d18 <xTaskCreateStatic+0xac>
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01b      	beq.n	8009d18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	2202      	movs	r2, #2
 8009cee:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	9302      	str	r3, [sp, #8]
 8009cfa:	f107 0314 	add.w	r3, r7, #20
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f850 	bl	8009db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d12:	f000 f8eb 	bl	8009eec <prvAddNewTaskToReadyList>
 8009d16:	e001      	b.n	8009d1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d1c:	697b      	ldr	r3, [r7, #20]
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3728      	adds	r7, #40	; 0x28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b08c      	sub	sp, #48	; 0x30
 8009d2a:	af04      	add	r7, sp, #16
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	603b      	str	r3, [r7, #0]
 8009d32:	4613      	mov	r3, r2
 8009d34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 f8dc 	bl	800aef8 <pvPortMalloc>
 8009d40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00e      	beq.n	8009d66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d48:	20a0      	movs	r0, #160	; 0xa0
 8009d4a:	f001 f8d5 	bl	800aef8 <pvPortMalloc>
 8009d4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d5c:	e005      	b.n	8009d6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d5e:	6978      	ldr	r0, [r7, #20]
 8009d60:	f001 f996 	bl	800b090 <vPortFree>
 8009d64:	e001      	b.n	8009d6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d017      	beq.n	8009da0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d78:	88fa      	ldrh	r2, [r7, #6]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9303      	str	r3, [sp, #12]
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	9302      	str	r3, [sp, #8]
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f80e 	bl	8009db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d94:	69f8      	ldr	r0, [r7, #28]
 8009d96:	f000 f8a9 	bl	8009eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	61bb      	str	r3, [r7, #24]
 8009d9e:	e002      	b.n	8009da6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295
 8009da4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009da6:	69bb      	ldr	r3, [r7, #24]
	}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	617b      	str	r3, [r7, #20]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01f      	beq.n	8009e3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	e012      	b.n	8009e2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	7819      	ldrb	r1, [r3, #0]
 8009e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	3334      	adds	r3, #52	; 0x34
 8009e14:	460a      	mov	r2, r1
 8009e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d006      	beq.n	8009e32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	3301      	adds	r3, #1
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	2b0f      	cmp	r3, #15
 8009e2e:	d9e9      	bls.n	8009e04 <prvInitialiseNewTask+0x54>
 8009e30:	e000      	b.n	8009e34 <prvInitialiseNewTask+0x84>
			{
				break;
 8009e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e3c:	e003      	b.n	8009e46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	2b06      	cmp	r3, #6
 8009e4a:	d901      	bls.n	8009e50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e4c:	2306      	movs	r3, #6
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5e:	2200      	movs	r2, #0
 8009e60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	3304      	adds	r3, #4
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff f928 	bl	80090bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	3318      	adds	r3, #24
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff f923 	bl	80090bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	f1c3 0207 	rsb	r2, r3, #7
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	334c      	adds	r3, #76	; 0x4c
 8009ea0:	224c      	movs	r2, #76	; 0x4c
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 fdd1 	bl	800ba4c <memset>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	4a0c      	ldr	r2, [pc, #48]	; (8009ee0 <prvInitialiseNewTask+0x130>)
 8009eae:	651a      	str	r2, [r3, #80]	; 0x50
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	4a0c      	ldr	r2, [pc, #48]	; (8009ee4 <prvInitialiseNewTask+0x134>)
 8009eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ee8 <prvInitialiseNewTask+0x138>)
 8009eba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	69b8      	ldr	r0, [r7, #24]
 8009ec2:	f000 fdcd 	bl	800aa60 <pxPortInitialiseStack>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed8:	bf00      	nop
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	200049f0 	.word	0x200049f0
 8009ee4:	20004a58 	.word	0x20004a58
 8009ee8:	20004ac0 	.word	0x20004ac0

08009eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ef4:	f000 fede 	bl	800acb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ef8:	4b2a      	ldr	r3, [pc, #168]	; (8009fa4 <prvAddNewTaskToReadyList+0xb8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	4a29      	ldr	r2, [pc, #164]	; (8009fa4 <prvAddNewTaskToReadyList+0xb8>)
 8009f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f02:	4b29      	ldr	r3, [pc, #164]	; (8009fa8 <prvAddNewTaskToReadyList+0xbc>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f0a:	4a27      	ldr	r2, [pc, #156]	; (8009fa8 <prvAddNewTaskToReadyList+0xbc>)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f10:	4b24      	ldr	r3, [pc, #144]	; (8009fa4 <prvAddNewTaskToReadyList+0xb8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d110      	bne.n	8009f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f18:	f000 fbd6 	bl	800a6c8 <prvInitialiseTaskLists>
 8009f1c:	e00d      	b.n	8009f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f1e:	4b23      	ldr	r3, [pc, #140]	; (8009fac <prvAddNewTaskToReadyList+0xc0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f26:	4b20      	ldr	r3, [pc, #128]	; (8009fa8 <prvAddNewTaskToReadyList+0xbc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d802      	bhi.n	8009f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f34:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <prvAddNewTaskToReadyList+0xbc>)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <prvAddNewTaskToReadyList+0xc4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	4a1b      	ldr	r2, [pc, #108]	; (8009fb0 <prvAddNewTaskToReadyList+0xc4>)
 8009f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	2201      	movs	r2, #1
 8009f4a:	409a      	lsls	r2, r3
 8009f4c:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <prvAddNewTaskToReadyList+0xc8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <prvAddNewTaskToReadyList+0xc8>)
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <prvAddNewTaskToReadyList+0xcc>)
 8009f64:	441a      	add	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7ff f8b2 	bl	80090d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f72:	f000 fecf 	bl	800ad14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <prvAddNewTaskToReadyList+0xc0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00e      	beq.n	8009f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <prvAddNewTaskToReadyList+0xbc>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d207      	bcs.n	8009f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <prvAddNewTaskToReadyList+0xd0>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	200005cc 	.word	0x200005cc
 8009fa8:	200004cc 	.word	0x200004cc
 8009fac:	200005d8 	.word	0x200005d8
 8009fb0:	200005e8 	.word	0x200005e8
 8009fb4:	200005d4 	.word	0x200005d4
 8009fb8:	200004d0 	.word	0x200004d0
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d017      	beq.n	800a002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fd2:	4b13      	ldr	r3, [pc, #76]	; (800a020 <vTaskDelay+0x60>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <vTaskDelay+0x30>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	60bb      	str	r3, [r7, #8]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ff0:	f000 f884 	bl	800a0fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fccc 	bl	800a994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ffc:	f000 f88c 	bl	800a118 <xTaskResumeAll>
 800a000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <vTaskDelay+0x64>)
 800a00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	200005f4 	.word	0x200005f4
 800a024:	e000ed04 	.word	0xe000ed04

0800a028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a036:	463a      	mov	r2, r7
 800a038:	1d39      	adds	r1, r7, #4
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fa44 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	9202      	str	r2, [sp, #8]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	2300      	movs	r3, #0
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	460a      	mov	r2, r1
 800a056:	4921      	ldr	r1, [pc, #132]	; (800a0dc <vTaskStartScheduler+0xb4>)
 800a058:	4821      	ldr	r0, [pc, #132]	; (800a0e0 <vTaskStartScheduler+0xb8>)
 800a05a:	f7ff fe07 	bl	8009c6c <xTaskCreateStatic>
 800a05e:	4603      	mov	r3, r0
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <vTaskStartScheduler+0xbc>)
 800a062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a064:	4b1f      	ldr	r3, [pc, #124]	; (800a0e4 <vTaskStartScheduler+0xbc>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e001      	b.n	800a076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d11b      	bne.n	800a0b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	613b      	str	r3, [r7, #16]
}
 800a08e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <vTaskStartScheduler+0xc0>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	334c      	adds	r3, #76	; 0x4c
 800a096:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <vTaskStartScheduler+0xc4>)
 800a098:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a09a:	4b15      	ldr	r3, [pc, #84]	; (800a0f0 <vTaskStartScheduler+0xc8>)
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <vTaskStartScheduler+0xcc>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0a8:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <vTaskStartScheduler+0xd0>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0ae:	f000 fd5f 	bl	800ab70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0b2:	e00e      	b.n	800a0d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ba:	d10a      	bne.n	800a0d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60fb      	str	r3, [r7, #12]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <vTaskStartScheduler+0xa8>
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800bcb0 	.word	0x0800bcb0
 800a0e0:	0800a699 	.word	0x0800a699
 800a0e4:	200005f0 	.word	0x200005f0
 800a0e8:	200004cc 	.word	0x200004cc
 800a0ec:	2000007c 	.word	0x2000007c
 800a0f0:	200005ec 	.word	0x200005ec
 800a0f4:	200005d8 	.word	0x200005d8
 800a0f8:	200005d0 	.word	0x200005d0

0800a0fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <vTaskSuspendAll+0x18>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a03      	ldr	r2, [pc, #12]	; (800a114 <vTaskSuspendAll+0x18>)
 800a108:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a10a:	bf00      	nop
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	200005f4 	.word	0x200005f4

0800a118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a126:	4b41      	ldr	r3, [pc, #260]	; (800a22c <xTaskResumeAll+0x114>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10a      	bne.n	800a144 <xTaskResumeAll+0x2c>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a144:	f000 fdb6 	bl	800acb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a148:	4b38      	ldr	r3, [pc, #224]	; (800a22c <xTaskResumeAll+0x114>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4a37      	ldr	r2, [pc, #220]	; (800a22c <xTaskResumeAll+0x114>)
 800a150:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a152:	4b36      	ldr	r3, [pc, #216]	; (800a22c <xTaskResumeAll+0x114>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d161      	bne.n	800a21e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a15a:	4b35      	ldr	r3, [pc, #212]	; (800a230 <xTaskResumeAll+0x118>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d05d      	beq.n	800a21e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a162:	e02e      	b.n	800a1c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	4b33      	ldr	r3, [pc, #204]	; (800a234 <xTaskResumeAll+0x11c>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3318      	adds	r3, #24
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff f80d 	bl	8009190 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff f808 	bl	8009190 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	2201      	movs	r2, #1
 800a186:	409a      	lsls	r2, r3
 800a188:	4b2b      	ldr	r3, [pc, #172]	; (800a238 <xTaskResumeAll+0x120>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	4a2a      	ldr	r2, [pc, #168]	; (800a238 <xTaskResumeAll+0x120>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a27      	ldr	r2, [pc, #156]	; (800a23c <xTaskResumeAll+0x124>)
 800a1a0:	441a      	add	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7fe ff94 	bl	80090d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	4b23      	ldr	r3, [pc, #140]	; (800a240 <xTaskResumeAll+0x128>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d302      	bcc.n	800a1c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a1bc:	4b21      	ldr	r3, [pc, #132]	; (800a244 <xTaskResumeAll+0x12c>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xTaskResumeAll+0x11c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1cc      	bne.n	800a164 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1d0:	f000 fb1c 	bl	800a80c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <xTaskResumeAll+0x130>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1e0:	f000 f836 	bl	800a250 <xTaskIncrementTick>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a1ea:	4b16      	ldr	r3, [pc, #88]	; (800a244 <xTaskResumeAll+0x12c>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f1      	bne.n	800a1e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a1fc:	4b12      	ldr	r3, [pc, #72]	; (800a248 <xTaskResumeAll+0x130>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a202:	4b10      	ldr	r3, [pc, #64]	; (800a244 <xTaskResumeAll+0x12c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <xTaskResumeAll+0x134>)
 800a210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a21e:	f000 fd79 	bl	800ad14 <vPortExitCritical>

	return xAlreadyYielded;
 800a222:	68bb      	ldr	r3, [r7, #8]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	200005f4 	.word	0x200005f4
 800a230:	200005cc 	.word	0x200005cc
 800a234:	2000058c 	.word	0x2000058c
 800a238:	200005d4 	.word	0x200005d4
 800a23c:	200004d0 	.word	0x200004d0
 800a240:	200004cc 	.word	0x200004cc
 800a244:	200005e0 	.word	0x200005e0
 800a248:	200005dc 	.word	0x200005dc
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a25a:	4b4e      	ldr	r3, [pc, #312]	; (800a394 <xTaskIncrementTick+0x144>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f040 808e 	bne.w	800a380 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a264:	4b4c      	ldr	r3, [pc, #304]	; (800a398 <xTaskIncrementTick+0x148>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3301      	adds	r3, #1
 800a26a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a26c:	4a4a      	ldr	r2, [pc, #296]	; (800a398 <xTaskIncrementTick+0x148>)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d120      	bne.n	800a2ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a278:	4b48      	ldr	r3, [pc, #288]	; (800a39c <xTaskIncrementTick+0x14c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00a      	beq.n	800a298 <xTaskIncrementTick+0x48>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	603b      	str	r3, [r7, #0]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xTaskIncrementTick+0x46>
 800a298:	4b40      	ldr	r3, [pc, #256]	; (800a39c <xTaskIncrementTick+0x14c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	4b40      	ldr	r3, [pc, #256]	; (800a3a0 <xTaskIncrementTick+0x150>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a3e      	ldr	r2, [pc, #248]	; (800a39c <xTaskIncrementTick+0x14c>)
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	4a3e      	ldr	r2, [pc, #248]	; (800a3a0 <xTaskIncrementTick+0x150>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	4b3d      	ldr	r3, [pc, #244]	; (800a3a4 <xTaskIncrementTick+0x154>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a3c      	ldr	r2, [pc, #240]	; (800a3a4 <xTaskIncrementTick+0x154>)
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	f000 faa9 	bl	800a80c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ba:	4b3b      	ldr	r3, [pc, #236]	; (800a3a8 <xTaskIncrementTick+0x158>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d348      	bcc.n	800a356 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c4:	4b35      	ldr	r3, [pc, #212]	; (800a39c <xTaskIncrementTick+0x14c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	4b36      	ldr	r3, [pc, #216]	; (800a3a8 <xTaskIncrementTick+0x158>)
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d4:	601a      	str	r2, [r3, #0]
					break;
 800a2d6:	e03e      	b.n	800a356 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d8:	4b30      	ldr	r3, [pc, #192]	; (800a39c <xTaskIncrementTick+0x14c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d203      	bcs.n	800a2f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2f0:	4a2d      	ldr	r2, [pc, #180]	; (800a3a8 <xTaskIncrementTick+0x158>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2f6:	e02e      	b.n	800a356 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe ff47 	bl	8009190 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3318      	adds	r3, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe ff3e 	bl	8009190 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	2201      	movs	r2, #1
 800a31a:	409a      	lsls	r2, r3
 800a31c:	4b23      	ldr	r3, [pc, #140]	; (800a3ac <xTaskIncrementTick+0x15c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4313      	orrs	r3, r2
 800a322:	4a22      	ldr	r2, [pc, #136]	; (800a3ac <xTaskIncrementTick+0x15c>)
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <xTaskIncrementTick+0x160>)
 800a334:	441a      	add	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7fe feca 	bl	80090d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	4b1b      	ldr	r3, [pc, #108]	; (800a3b4 <xTaskIncrementTick+0x164>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3b9      	bcc.n	800a2c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a354:	e7b6      	b.n	800a2c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a356:	4b17      	ldr	r3, [pc, #92]	; (800a3b4 <xTaskIncrementTick+0x164>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4914      	ldr	r1, [pc, #80]	; (800a3b0 <xTaskIncrementTick+0x160>)
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d901      	bls.n	800a372 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a36e:	2301      	movs	r3, #1
 800a370:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <xTaskIncrementTick+0x168>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a37a:	2301      	movs	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	e004      	b.n	800a38a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a380:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <xTaskIncrementTick+0x16c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	4a0d      	ldr	r2, [pc, #52]	; (800a3bc <xTaskIncrementTick+0x16c>)
 800a388:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a38a:	697b      	ldr	r3, [r7, #20]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	200005f4 	.word	0x200005f4
 800a398:	200005d0 	.word	0x200005d0
 800a39c:	20000584 	.word	0x20000584
 800a3a0:	20000588 	.word	0x20000588
 800a3a4:	200005e4 	.word	0x200005e4
 800a3a8:	200005ec 	.word	0x200005ec
 800a3ac:	200005d4 	.word	0x200005d4
 800a3b0:	200004d0 	.word	0x200004d0
 800a3b4:	200004cc 	.word	0x200004cc
 800a3b8:	200005e0 	.word	0x200005e0
 800a3bc:	200005dc 	.word	0x200005dc

0800a3c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3c6:	4b29      	ldr	r3, [pc, #164]	; (800a46c <vTaskSwitchContext+0xac>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3ce:	4b28      	ldr	r3, [pc, #160]	; (800a470 <vTaskSwitchContext+0xb0>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3d4:	e044      	b.n	800a460 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a3d6:	4b26      	ldr	r3, [pc, #152]	; (800a470 <vTaskSwitchContext+0xb0>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <vTaskSwitchContext+0xb4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	fab3 f383 	clz	r3, r3
 800a3e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
 800a3ec:	f1c3 031f 	rsb	r3, r3, #31
 800a3f0:	617b      	str	r3, [r7, #20]
 800a3f2:	4921      	ldr	r1, [pc, #132]	; (800a478 <vTaskSwitchContext+0xb8>)
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	607b      	str	r3, [r7, #4]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <vTaskSwitchContext+0x5a>
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4a14      	ldr	r2, [pc, #80]	; (800a478 <vTaskSwitchContext+0xb8>)
 800a428:	4413      	add	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3308      	adds	r3, #8
 800a43e:	429a      	cmp	r2, r3
 800a440:	d104      	bne.n	800a44c <vTaskSwitchContext+0x8c>
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	605a      	str	r2, [r3, #4]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <vTaskSwitchContext+0xbc>)
 800a454:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <vTaskSwitchContext+0xbc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	334c      	adds	r3, #76	; 0x4c
 800a45c:	4a08      	ldr	r2, [pc, #32]	; (800a480 <vTaskSwitchContext+0xc0>)
 800a45e:	6013      	str	r3, [r2, #0]
}
 800a460:	bf00      	nop
 800a462:	371c      	adds	r7, #28
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	200005f4 	.word	0x200005f4
 800a470:	200005e0 	.word	0x200005e0
 800a474:	200005d4 	.word	0x200005d4
 800a478:	200004d0 	.word	0x200004d0
 800a47c:	200004cc 	.word	0x200004cc
 800a480:	2000007c 	.word	0x2000007c

0800a484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	60fb      	str	r3, [r7, #12]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4aa:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <vTaskPlaceOnEventList+0x44>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3318      	adds	r3, #24
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7fe fe33 	bl	800911e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	6838      	ldr	r0, [r7, #0]
 800a4bc:	f000 fa6a 	bl	800a994 <prvAddCurrentTaskToDelayedList>
}
 800a4c0:	bf00      	nop
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200004cc 	.word	0x200004cc

0800a4cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	60fb      	str	r3, [r7, #12]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3318      	adds	r3, #24
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fe47 	bl	8009190 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a502:	4b1d      	ldr	r3, [pc, #116]	; (800a578 <xTaskRemoveFromEventList+0xac>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d11c      	bne.n	800a544 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fe3e 	bl	8009190 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	2201      	movs	r2, #1
 800a51a:	409a      	lsls	r2, r3
 800a51c:	4b17      	ldr	r3, [pc, #92]	; (800a57c <xTaskRemoveFromEventList+0xb0>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4313      	orrs	r3, r2
 800a522:	4a16      	ldr	r2, [pc, #88]	; (800a57c <xTaskRemoveFromEventList+0xb0>)
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4a13      	ldr	r2, [pc, #76]	; (800a580 <xTaskRemoveFromEventList+0xb4>)
 800a534:	441a      	add	r2, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7fe fdca 	bl	80090d6 <vListInsertEnd>
 800a542:	e005      	b.n	800a550 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	3318      	adds	r3, #24
 800a548:	4619      	mov	r1, r3
 800a54a:	480e      	ldr	r0, [pc, #56]	; (800a584 <xTaskRemoveFromEventList+0xb8>)
 800a54c:	f7fe fdc3 	bl	80090d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <xTaskRemoveFromEventList+0xbc>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d905      	bls.n	800a56a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <xTaskRemoveFromEventList+0xc0>)
 800a564:	2201      	movs	r2, #1
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e001      	b.n	800a56e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a56a:	2300      	movs	r3, #0
 800a56c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a56e:	697b      	ldr	r3, [r7, #20]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	200005f4 	.word	0x200005f4
 800a57c:	200005d4 	.word	0x200005d4
 800a580:	200004d0 	.word	0x200004d0
 800a584:	2000058c 	.word	0x2000058c
 800a588:	200004cc 	.word	0x200004cc
 800a58c:	200005e0 	.word	0x200005e0

0800a590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a598:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <vTaskInternalSetTimeOutState+0x24>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <vTaskInternalSetTimeOutState+0x28>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	605a      	str	r2, [r3, #4]
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	200005e4 	.word	0x200005e4
 800a5b8:	200005d0 	.word	0x200005d0

0800a5bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	613b      	str	r3, [r7, #16]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5fe:	f000 fb59 	bl	800acb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a602:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <xTaskCheckForTimeOut+0xbc>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d102      	bne.n	800a622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	e023      	b.n	800a66a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b15      	ldr	r3, [pc, #84]	; (800a67c <xTaskCheckForTimeOut+0xc0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d007      	beq.n	800a63e <xTaskCheckForTimeOut+0x82>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	429a      	cmp	r2, r3
 800a636:	d302      	bcc.n	800a63e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e015      	b.n	800a66a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	429a      	cmp	r2, r3
 800a646:	d20b      	bcs.n	800a660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ff9b 	bl	800a590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	e004      	b.n	800a66a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a666:	2301      	movs	r3, #1
 800a668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a66a:	f000 fb53 	bl	800ad14 <vPortExitCritical>

	return xReturn;
 800a66e:	69fb      	ldr	r3, [r7, #28]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3720      	adds	r7, #32
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	200005d0 	.word	0x200005d0
 800a67c:	200005e4 	.word	0x200005e4

0800a680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a684:	4b03      	ldr	r3, [pc, #12]	; (800a694 <vTaskMissedYield+0x14>)
 800a686:	2201      	movs	r2, #1
 800a688:	601a      	str	r2, [r3, #0]
}
 800a68a:	bf00      	nop
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	200005e0 	.word	0x200005e0

0800a698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6a0:	f000 f852 	bl	800a748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6a4:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <prvIdleTask+0x28>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d9f9      	bls.n	800a6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <prvIdleTask+0x2c>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6bc:	e7f0      	b.n	800a6a0 <prvIdleTask+0x8>
 800a6be:	bf00      	nop
 800a6c0:	200004d0 	.word	0x200004d0
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	e00c      	b.n	800a6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4a12      	ldr	r2, [pc, #72]	; (800a728 <prvInitialiseTaskLists+0x60>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fcca 	bl	800907c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	607b      	str	r3, [r7, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b06      	cmp	r3, #6
 800a6f2:	d9ef      	bls.n	800a6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6f4:	480d      	ldr	r0, [pc, #52]	; (800a72c <prvInitialiseTaskLists+0x64>)
 800a6f6:	f7fe fcc1 	bl	800907c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6fa:	480d      	ldr	r0, [pc, #52]	; (800a730 <prvInitialiseTaskLists+0x68>)
 800a6fc:	f7fe fcbe 	bl	800907c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a700:	480c      	ldr	r0, [pc, #48]	; (800a734 <prvInitialiseTaskLists+0x6c>)
 800a702:	f7fe fcbb 	bl	800907c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a706:	480c      	ldr	r0, [pc, #48]	; (800a738 <prvInitialiseTaskLists+0x70>)
 800a708:	f7fe fcb8 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a70c:	480b      	ldr	r0, [pc, #44]	; (800a73c <prvInitialiseTaskLists+0x74>)
 800a70e:	f7fe fcb5 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <prvInitialiseTaskLists+0x78>)
 800a714:	4a05      	ldr	r2, [pc, #20]	; (800a72c <prvInitialiseTaskLists+0x64>)
 800a716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a718:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <prvInitialiseTaskLists+0x7c>)
 800a71a:	4a05      	ldr	r2, [pc, #20]	; (800a730 <prvInitialiseTaskLists+0x68>)
 800a71c:	601a      	str	r2, [r3, #0]
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200004d0 	.word	0x200004d0
 800a72c:	2000055c 	.word	0x2000055c
 800a730:	20000570 	.word	0x20000570
 800a734:	2000058c 	.word	0x2000058c
 800a738:	200005a0 	.word	0x200005a0
 800a73c:	200005b8 	.word	0x200005b8
 800a740:	20000584 	.word	0x20000584
 800a744:	20000588 	.word	0x20000588

0800a748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a74e:	e019      	b.n	800a784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a750:	f000 fab0 	bl	800acb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a754:	4b10      	ldr	r3, [pc, #64]	; (800a798 <prvCheckTasksWaitingTermination+0x50>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fd15 	bl	8009190 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a766:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <prvCheckTasksWaitingTermination+0x54>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	4a0b      	ldr	r2, [pc, #44]	; (800a79c <prvCheckTasksWaitingTermination+0x54>)
 800a76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <prvCheckTasksWaitingTermination+0x58>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3b01      	subs	r3, #1
 800a776:	4a0a      	ldr	r2, [pc, #40]	; (800a7a0 <prvCheckTasksWaitingTermination+0x58>)
 800a778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a77a:	f000 facb 	bl	800ad14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f810 	bl	800a7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <prvCheckTasksWaitingTermination+0x58>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e1      	bne.n	800a750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200005a0 	.word	0x200005a0
 800a79c:	200005cc 	.word	0x200005cc
 800a7a0:	200005b4 	.word	0x200005b4

0800a7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	334c      	adds	r3, #76	; 0x4c
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 f953 	bl	800ba5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d108      	bne.n	800a7d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fc63 	bl	800b090 <vPortFree>
				vPortFree( pxTCB );
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fc60 	bl	800b090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7d0:	e018      	b.n	800a804 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d103      	bne.n	800a7e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fc57 	bl	800b090 <vPortFree>
	}
 800a7e2:	e00f      	b.n	800a804 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d00a      	beq.n	800a804 <prvDeleteTCB+0x60>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <prvDeleteTCB+0x5e>
	}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a812:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <prvResetNextTaskUnblockTime+0x38>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <prvResetNextTaskUnblockTime+0x3c>)
 800a81e:	f04f 32ff 	mov.w	r2, #4294967295
 800a822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a824:	e008      	b.n	800a838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a826:	4b07      	ldr	r3, [pc, #28]	; (800a844 <prvResetNextTaskUnblockTime+0x38>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	4a04      	ldr	r2, [pc, #16]	; (800a848 <prvResetNextTaskUnblockTime+0x3c>)
 800a836:	6013      	str	r3, [r2, #0]
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	20000584 	.word	0x20000584
 800a848:	200005ec 	.word	0x200005ec

0800a84c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a852:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <xTaskGetSchedulerState+0x34>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a85a:	2301      	movs	r3, #1
 800a85c:	607b      	str	r3, [r7, #4]
 800a85e:	e008      	b.n	800a872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a860:	4b08      	ldr	r3, [pc, #32]	; (800a884 <xTaskGetSchedulerState+0x38>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a868:	2302      	movs	r3, #2
 800a86a:	607b      	str	r3, [r7, #4]
 800a86c:	e001      	b.n	800a872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a86e:	2300      	movs	r3, #0
 800a870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a872:	687b      	ldr	r3, [r7, #4]
	}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	200005d8 	.word	0x200005d8
 800a884:	200005f4 	.word	0x200005f4

0800a888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a894:	2300      	movs	r3, #0
 800a896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d06e      	beq.n	800a97c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a89e:	4b3a      	ldr	r3, [pc, #232]	; (800a988 <xTaskPriorityDisinherit+0x100>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d00a      	beq.n	800a8be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	60fb      	str	r3, [r7, #12]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	60bb      	str	r3, [r7, #8]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8e0:	1e5a      	subs	r2, r3, #1
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d044      	beq.n	800a97c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d140      	bne.n	800a97c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fc46 	bl	8009190 <uxListRemove>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d115      	bne.n	800a936 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90e:	491f      	ldr	r1, [pc, #124]	; (800a98c <xTaskPriorityDisinherit+0x104>)
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xTaskPriorityDisinherit+0xae>
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	2201      	movs	r2, #1
 800a926:	fa02 f303 	lsl.w	r3, r2, r3
 800a92a:	43da      	mvns	r2, r3
 800a92c:	4b18      	ldr	r3, [pc, #96]	; (800a990 <xTaskPriorityDisinherit+0x108>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4013      	ands	r3, r2
 800a932:	4a17      	ldr	r2, [pc, #92]	; (800a990 <xTaskPriorityDisinherit+0x108>)
 800a934:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a942:	f1c3 0207 	rsb	r2, r3, #7
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94e:	2201      	movs	r2, #1
 800a950:	409a      	lsls	r2, r3
 800a952:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <xTaskPriorityDisinherit+0x108>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	4a0d      	ldr	r2, [pc, #52]	; (800a990 <xTaskPriorityDisinherit+0x108>)
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4a08      	ldr	r2, [pc, #32]	; (800a98c <xTaskPriorityDisinherit+0x104>)
 800a96a:	441a      	add	r2, r3
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	3304      	adds	r3, #4
 800a970:	4619      	mov	r1, r3
 800a972:	4610      	mov	r0, r2
 800a974:	f7fe fbaf 	bl	80090d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a978:	2301      	movs	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a97c:	697b      	ldr	r3, [r7, #20]
	}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	200004cc 	.word	0x200004cc
 800a98c:	200004d0 	.word	0x200004d0
 800a990:	200005d4 	.word	0x200005d4

0800a994 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9a4:	4b28      	ldr	r3, [pc, #160]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fbf0 	bl	8009190 <uxListRemove>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10b      	bne.n	800a9ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a9b6:	4b24      	ldr	r3, [pc, #144]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	2201      	movs	r2, #1
 800a9be:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c2:	43da      	mvns	r2, r3
 800a9c4:	4b21      	ldr	r3, [pc, #132]	; (800aa4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	4a20      	ldr	r2, [pc, #128]	; (800aa4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a9cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d4:	d10a      	bne.n	800a9ec <prvAddCurrentTaskToDelayedList+0x58>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9dc:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	481a      	ldr	r0, [pc, #104]	; (800aa50 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a9e6:	f7fe fb76 	bl	80090d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9ea:	e026      	b.n	800aa3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9f4:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d209      	bcs.n	800aa18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa04:	4b13      	ldr	r3, [pc, #76]	; (800aa54 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4610      	mov	r0, r2
 800aa12:	f7fe fb84 	bl	800911e <vListInsert>
}
 800aa16:	e010      	b.n	800aa3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7fe fb7a 	bl	800911e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d202      	bcs.n	800aa3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aa34:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6013      	str	r3, [r2, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	200005d0 	.word	0x200005d0
 800aa48:	200004cc 	.word	0x200004cc
 800aa4c:	200005d4 	.word	0x200005d4
 800aa50:	200005b8 	.word	0x200005b8
 800aa54:	20000588 	.word	0x20000588
 800aa58:	20000584 	.word	0x20000584
 800aa5c:	200005ec 	.word	0x200005ec

0800aa60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3b04      	subs	r3, #4
 800aa70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3b04      	subs	r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f023 0201 	bic.w	r2, r3, #1
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3b04      	subs	r3, #4
 800aa8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa90:	4a0c      	ldr	r2, [pc, #48]	; (800aac4 <pxPortInitialiseStack+0x64>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3b14      	subs	r3, #20
 800aa9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3b04      	subs	r3, #4
 800aaa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f06f 0202 	mvn.w	r2, #2
 800aaae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3b20      	subs	r3, #32
 800aab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aab6:	68fb      	ldr	r3, [r7, #12]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	0800aac9 	.word	0x0800aac9

0800aac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aad2:	4b12      	ldr	r3, [pc, #72]	; (800ab1c <prvTaskExitError+0x54>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d00a      	beq.n	800aaf2 <prvTaskExitError+0x2a>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	60fb      	str	r3, [r7, #12]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <prvTaskExitError+0x28>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60bb      	str	r3, [r7, #8]
}
 800ab04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab06:	bf00      	nop
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0fc      	beq.n	800ab08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	2000002c 	.word	0x2000002c

0800ab20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <pxCurrentTCBConst2>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	f380 8809 	msr	PSP, r0
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	4770      	bx	lr
 800ab3c:	f3af 8000 	nop.w

0800ab40 <pxCurrentTCBConst2>:
 800ab40:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab48:	4808      	ldr	r0, [pc, #32]	; (800ab6c <prvPortStartFirstTask+0x24>)
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	6800      	ldr	r0, [r0, #0]
 800ab4e:	f380 8808 	msr	MSP, r0
 800ab52:	f04f 0000 	mov.w	r0, #0
 800ab56:	f380 8814 	msr	CONTROL, r0
 800ab5a:	b662      	cpsie	i
 800ab5c:	b661      	cpsie	f
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	df00      	svc	0
 800ab68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab6a:	bf00      	nop
 800ab6c:	e000ed08 	.word	0xe000ed08

0800ab70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab76:	4b46      	ldr	r3, [pc, #280]	; (800ac90 <xPortStartScheduler+0x120>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a46      	ldr	r2, [pc, #280]	; (800ac94 <xPortStartScheduler+0x124>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d10a      	bne.n	800ab96 <xPortStartScheduler+0x26>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab96:	4b3e      	ldr	r3, [pc, #248]	; (800ac90 <xPortStartScheduler+0x120>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a3f      	ldr	r2, [pc, #252]	; (800ac98 <xPortStartScheduler+0x128>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d10a      	bne.n	800abb6 <xPortStartScheduler+0x46>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	60fb      	str	r3, [r7, #12]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abb6:	4b39      	ldr	r3, [pc, #228]	; (800ac9c <xPortStartScheduler+0x12c>)
 800abb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	4b31      	ldr	r3, [pc, #196]	; (800aca0 <xPortStartScheduler+0x130>)
 800abdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abde:	4b31      	ldr	r3, [pc, #196]	; (800aca4 <xPortStartScheduler+0x134>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abe4:	e009      	b.n	800abfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800abe6:	4b2f      	ldr	r3, [pc, #188]	; (800aca4 <xPortStartScheduler+0x134>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3b01      	subs	r3, #1
 800abec:	4a2d      	ldr	r2, [pc, #180]	; (800aca4 <xPortStartScheduler+0x134>)
 800abee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	2b80      	cmp	r3, #128	; 0x80
 800ac04:	d0ef      	beq.n	800abe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac06:	4b27      	ldr	r3, [pc, #156]	; (800aca4 <xPortStartScheduler+0x134>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f1c3 0307 	rsb	r3, r3, #7
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d00a      	beq.n	800ac28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	60bb      	str	r3, [r7, #8]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac28:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <xPortStartScheduler+0x134>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <xPortStartScheduler+0x134>)
 800ac30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac32:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <xPortStartScheduler+0x134>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac3a:	4a1a      	ldr	r2, [pc, #104]	; (800aca4 <xPortStartScheduler+0x134>)
 800ac3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac46:	4b18      	ldr	r3, [pc, #96]	; (800aca8 <xPortStartScheduler+0x138>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a17      	ldr	r2, [pc, #92]	; (800aca8 <xPortStartScheduler+0x138>)
 800ac4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac52:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <xPortStartScheduler+0x138>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a14      	ldr	r2, [pc, #80]	; (800aca8 <xPortStartScheduler+0x138>)
 800ac58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac5e:	f000 f8dd 	bl	800ae1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <xPortStartScheduler+0x13c>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac68:	f000 f8fc 	bl	800ae64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac6c:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <xPortStartScheduler+0x140>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a0f      	ldr	r2, [pc, #60]	; (800acb0 <xPortStartScheduler+0x140>)
 800ac72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac78:	f7ff ff66 	bl	800ab48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac7c:	f7ff fba0 	bl	800a3c0 <vTaskSwitchContext>
	prvTaskExitError();
 800ac80:	f7ff ff22 	bl	800aac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	e000ed00 	.word	0xe000ed00
 800ac94:	410fc271 	.word	0x410fc271
 800ac98:	410fc270 	.word	0x410fc270
 800ac9c:	e000e400 	.word	0xe000e400
 800aca0:	200005f8 	.word	0x200005f8
 800aca4:	200005fc 	.word	0x200005fc
 800aca8:	e000ed20 	.word	0xe000ed20
 800acac:	2000002c 	.word	0x2000002c
 800acb0:	e000ef34 	.word	0xe000ef34

0800acb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	607b      	str	r3, [r7, #4]
}
 800accc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <vPortEnterCritical+0x58>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	4a0d      	ldr	r2, [pc, #52]	; (800ad0c <vPortEnterCritical+0x58>)
 800acd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acd8:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <vPortEnterCritical+0x58>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d10f      	bne.n	800ad00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <vPortEnterCritical+0x5c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <vPortEnterCritical+0x4c>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	603b      	str	r3, [r7, #0]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <vPortEnterCritical+0x4a>
	}
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	2000002c 	.word	0x2000002c
 800ad10:	e000ed04 	.word	0xe000ed04

0800ad14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad1a:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <vPortExitCritical+0x50>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <vPortExitCritical+0x24>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	607b      	str	r3, [r7, #4]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <vPortExitCritical+0x50>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	4a09      	ldr	r2, [pc, #36]	; (800ad64 <vPortExitCritical+0x50>)
 800ad40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad42:	4b08      	ldr	r3, [pc, #32]	; (800ad64 <vPortExitCritical+0x50>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d105      	bne.n	800ad56 <vPortExitCritical+0x42>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	f383 8811 	msr	BASEPRI, r3
}
 800ad54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	2000002c 	.word	0x2000002c
	...

0800ad70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad70:	f3ef 8009 	mrs	r0, PSP
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <pxCurrentTCBConst>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	f01e 0f10 	tst.w	lr, #16
 800ad80:	bf08      	it	eq
 800ad82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	6010      	str	r0, [r2, #0]
 800ad8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad94:	f380 8811 	msr	BASEPRI, r0
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f7ff fb0e 	bl	800a3c0 <vTaskSwitchContext>
 800ada4:	f04f 0000 	mov.w	r0, #0
 800ada8:	f380 8811 	msr	BASEPRI, r0
 800adac:	bc09      	pop	{r0, r3}
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	6808      	ldr	r0, [r1, #0]
 800adb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb6:	f01e 0f10 	tst.w	lr, #16
 800adba:	bf08      	it	eq
 800adbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800adc0:	f380 8809 	msr	PSP, r0
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	f3af 8000 	nop.w

0800add0 <pxCurrentTCBConst>:
 800add0:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop

0800add8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	607b      	str	r3, [r7, #4]
}
 800adf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adf2:	f7ff fa2d 	bl	800a250 <xTaskIncrementTick>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <SysTick_Handler+0x40>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	f383 8811 	msr	BASEPRI, r3
}
 800ae0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <vPortSetupTimerInterrupt+0x34>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <vPortSetupTimerInterrupt+0x38>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <vPortSetupTimerInterrupt+0x3c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <vPortSetupTimerInterrupt+0x40>)
 800ae32:	fba2 2303 	umull	r2, r3, r2, r3
 800ae36:	099b      	lsrs	r3, r3, #6
 800ae38:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <vPortSetupTimerInterrupt+0x44>)
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae3e:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <vPortSetupTimerInterrupt+0x34>)
 800ae40:	2207      	movs	r2, #7
 800ae42:	601a      	str	r2, [r3, #0]
}
 800ae44:	bf00      	nop
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	e000e010 	.word	0xe000e010
 800ae54:	e000e018 	.word	0xe000e018
 800ae58:	20000000 	.word	0x20000000
 800ae5c:	10624dd3 	.word	0x10624dd3
 800ae60:	e000e014 	.word	0xe000e014

0800ae64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae74 <vPortEnableVFP+0x10>
 800ae68:	6801      	ldr	r1, [r0, #0]
 800ae6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae6e:	6001      	str	r1, [r0, #0]
 800ae70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae72:	bf00      	nop
 800ae74:	e000ed88 	.word	0xe000ed88

0800ae78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae7e:	f3ef 8305 	mrs	r3, IPSR
 800ae82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b0f      	cmp	r3, #15
 800ae88:	d914      	bls.n	800aeb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae8a:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <vPortValidateInterruptPriority+0x70>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <vPortValidateInterruptPriority+0x74>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	7afa      	ldrb	r2, [r7, #11]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d20a      	bcs.n	800aeb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	607b      	str	r3, [r7, #4]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <vPortValidateInterruptPriority+0x78>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aebc:	4b0d      	ldr	r3, [pc, #52]	; (800aef4 <vPortValidateInterruptPriority+0x7c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d90a      	bls.n	800aeda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	603b      	str	r3, [r7, #0]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <vPortValidateInterruptPriority+0x60>
	}
 800aeda:	bf00      	nop
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	e000e3f0 	.word	0xe000e3f0
 800aeec:	200005f8 	.word	0x200005f8
 800aef0:	e000ed0c 	.word	0xe000ed0c
 800aef4:	200005fc 	.word	0x200005fc

0800aef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af04:	f7ff f8fa 	bl	800a0fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af08:	4b5b      	ldr	r3, [pc, #364]	; (800b078 <pvPortMalloc+0x180>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af10:	f000 f920 	bl	800b154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af14:	4b59      	ldr	r3, [pc, #356]	; (800b07c <pvPortMalloc+0x184>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4013      	ands	r3, r2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f040 8093 	bne.w	800b048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01d      	beq.n	800af64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af28:	2208      	movs	r2, #8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4413      	add	r3, r2
 800af2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	2b00      	cmp	r3, #0
 800af38:	d014      	beq.n	800af64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <pvPortMalloc+0x6c>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	617b      	str	r3, [r7, #20]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d06e      	beq.n	800b048 <pvPortMalloc+0x150>
 800af6a:	4b45      	ldr	r3, [pc, #276]	; (800b080 <pvPortMalloc+0x188>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d869      	bhi.n	800b048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af74:	4b43      	ldr	r3, [pc, #268]	; (800b084 <pvPortMalloc+0x18c>)
 800af76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af78:	4b42      	ldr	r3, [pc, #264]	; (800b084 <pvPortMalloc+0x18c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af7e:	e004      	b.n	800af8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d903      	bls.n	800af9c <pvPortMalloc+0xa4>
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1f1      	bne.n	800af80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af9c:	4b36      	ldr	r3, [pc, #216]	; (800b078 <pvPortMalloc+0x180>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d050      	beq.n	800b048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2208      	movs	r2, #8
 800afac:	4413      	add	r3, r2
 800afae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	2308      	movs	r3, #8
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d91f      	bls.n	800b008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4413      	add	r3, r2
 800afce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <pvPortMalloc+0xf8>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	613b      	str	r3, [r7, #16]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	1ad2      	subs	r2, r2, r3
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b002:	69b8      	ldr	r0, [r7, #24]
 800b004:	f000 f908 	bl	800b218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b008:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <pvPortMalloc+0x188>)
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	4a1b      	ldr	r2, [pc, #108]	; (800b080 <pvPortMalloc+0x188>)
 800b014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b016:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <pvPortMalloc+0x188>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <pvPortMalloc+0x190>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d203      	bcs.n	800b02a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b022:	4b17      	ldr	r3, [pc, #92]	; (800b080 <pvPortMalloc+0x188>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a18      	ldr	r2, [pc, #96]	; (800b088 <pvPortMalloc+0x190>)
 800b028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	4b13      	ldr	r3, [pc, #76]	; (800b07c <pvPortMalloc+0x184>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	431a      	orrs	r2, r3
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <pvPortMalloc+0x194>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a11      	ldr	r2, [pc, #68]	; (800b08c <pvPortMalloc+0x194>)
 800b046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b048:	f7ff f866 	bl	800a118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	f003 0307 	and.w	r3, r3, #7
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00a      	beq.n	800b06c <pvPortMalloc+0x174>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	60fb      	str	r3, [r7, #12]
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <pvPortMalloc+0x172>
	return pvReturn;
 800b06c:	69fb      	ldr	r3, [r7, #28]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3728      	adds	r7, #40	; 0x28
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20004208 	.word	0x20004208
 800b07c:	2000421c 	.word	0x2000421c
 800b080:	2000420c 	.word	0x2000420c
 800b084:	20004200 	.word	0x20004200
 800b088:	20004210 	.word	0x20004210
 800b08c:	20004214 	.word	0x20004214

0800b090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d04d      	beq.n	800b13e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0a2:	2308      	movs	r3, #8
 800b0a4:	425b      	negs	r3, r3
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	4b24      	ldr	r3, [pc, #144]	; (800b148 <vPortFree+0xb8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <vPortFree+0x44>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	60fb      	str	r3, [r7, #12]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <vPortFree+0x62>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	60bb      	str	r3, [r7, #8]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	4b14      	ldr	r3, [pc, #80]	; (800b148 <vPortFree+0xb8>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01e      	beq.n	800b13e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d11a      	bne.n	800b13e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	4b0e      	ldr	r3, [pc, #56]	; (800b148 <vPortFree+0xb8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	43db      	mvns	r3, r3
 800b112:	401a      	ands	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b118:	f7fe fff0 	bl	800a0fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <vPortFree+0xbc>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4413      	add	r3, r2
 800b126:	4a09      	ldr	r2, [pc, #36]	; (800b14c <vPortFree+0xbc>)
 800b128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b12a:	6938      	ldr	r0, [r7, #16]
 800b12c:	f000 f874 	bl	800b218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <vPortFree+0xc0>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3301      	adds	r3, #1
 800b136:	4a06      	ldr	r2, [pc, #24]	; (800b150 <vPortFree+0xc0>)
 800b138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b13a:	f7fe ffed 	bl	800a118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b13e:	bf00      	nop
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	2000421c 	.word	0x2000421c
 800b14c:	2000420c 	.word	0x2000420c
 800b150:	20004218 	.word	0x20004218

0800b154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b15a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b160:	4b27      	ldr	r3, [pc, #156]	; (800b200 <prvHeapInit+0xac>)
 800b162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00c      	beq.n	800b188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3307      	adds	r3, #7
 800b172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 0307 	bic.w	r3, r3, #7
 800b17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	4a1f      	ldr	r2, [pc, #124]	; (800b200 <prvHeapInit+0xac>)
 800b184:	4413      	add	r3, r2
 800b186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b18c:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <prvHeapInit+0xb0>)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b192:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <prvHeapInit+0xb0>)
 800b194:	2200      	movs	r2, #0
 800b196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 0307 	bic.w	r3, r3, #7
 800b1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a15      	ldr	r2, [pc, #84]	; (800b208 <prvHeapInit+0xb4>)
 800b1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1b6:	4b14      	ldr	r3, [pc, #80]	; (800b208 <prvHeapInit+0xb4>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1be:	4b12      	ldr	r3, [pc, #72]	; (800b208 <prvHeapInit+0xb4>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	1ad2      	subs	r2, r2, r3
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <prvHeapInit+0xb4>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <prvHeapInit+0xb8>)
 800b1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4a09      	ldr	r2, [pc, #36]	; (800b210 <prvHeapInit+0xbc>)
 800b1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <prvHeapInit+0xc0>)
 800b1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1f2:	601a      	str	r2, [r3, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	20000600 	.word	0x20000600
 800b204:	20004200 	.word	0x20004200
 800b208:	20004208 	.word	0x20004208
 800b20c:	20004210 	.word	0x20004210
 800b210:	2000420c 	.word	0x2000420c
 800b214:	2000421c 	.word	0x2000421c

0800b218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b220:	4b28      	ldr	r3, [pc, #160]	; (800b2c4 <prvInsertBlockIntoFreeList+0xac>)
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	e002      	b.n	800b22c <prvInsertBlockIntoFreeList+0x14>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d8f7      	bhi.n	800b226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	4413      	add	r3, r2
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	429a      	cmp	r2, r3
 800b246:	d108      	bne.n	800b25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	441a      	add	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	441a      	add	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d118      	bne.n	800b2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d00d      	beq.n	800b296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	441a      	add	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	e008      	b.n	800b2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	e003      	b.n	800b2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d002      	beq.n	800b2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2b6:	bf00      	nop
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	20004200 	.word	0x20004200
 800b2c8:	20004208 	.word	0x20004208

0800b2cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	490e      	ldr	r1, [pc, #56]	; (800b30c <MX_USB_HOST_Init+0x40>)
 800b2d4:	480e      	ldr	r0, [pc, #56]	; (800b310 <MX_USB_HOST_Init+0x44>)
 800b2d6:	f7fb fe3d 	bl	8006f54 <USBH_Init>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b2e0:	f7f5 fb74 	bl	80009cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b2e4:	490b      	ldr	r1, [pc, #44]	; (800b314 <MX_USB_HOST_Init+0x48>)
 800b2e6:	480a      	ldr	r0, [pc, #40]	; (800b310 <MX_USB_HOST_Init+0x44>)
 800b2e8:	f7fb ff09 	bl	80070fe <USBH_RegisterClass>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b2f2:	f7f5 fb6b 	bl	80009cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b2f6:	4806      	ldr	r0, [pc, #24]	; (800b310 <MX_USB_HOST_Init+0x44>)
 800b2f8:	f7fb ff8d 	bl	8007216 <USBH_Start>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b302:	f7f5 fb63 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b306:	bf00      	nop
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0800b319 	.word	0x0800b319
 800b310:	20004220 	.word	0x20004220
 800b314:	2000000c 	.word	0x2000000c

0800b318 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	3b01      	subs	r3, #1
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d819      	bhi.n	800b360 <USBH_UserProcess+0x48>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <USBH_UserProcess+0x1c>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b361 	.word	0x0800b361
 800b338:	0800b351 	.word	0x0800b351
 800b33c:	0800b361 	.word	0x0800b361
 800b340:	0800b359 	.word	0x0800b359
 800b344:	0800b349 	.word	0x0800b349
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <USBH_UserProcess+0x58>)
 800b34a:	2203      	movs	r2, #3
 800b34c:	701a      	strb	r2, [r3, #0]
  break;
 800b34e:	e008      	b.n	800b362 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <USBH_UserProcess+0x58>)
 800b352:	2202      	movs	r2, #2
 800b354:	701a      	strb	r2, [r3, #0]
  break;
 800b356:	e004      	b.n	800b362 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <USBH_UserProcess+0x58>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	701a      	strb	r2, [r3, #0]
  break;
 800b35e:	e000      	b.n	800b362 <USBH_UserProcess+0x4a>

  default:
  break;
 800b360:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	20004604 	.word	0x20004604

0800b374 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	609a      	str	r2, [r3, #8]
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b394:	d147      	bne.n	800b426 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b396:	2300      	movs	r3, #0
 800b398:	613b      	str	r3, [r7, #16]
 800b39a:	4b25      	ldr	r3, [pc, #148]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	4a24      	ldr	r2, [pc, #144]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b3a0:	f043 0301 	orr.w	r3, r3, #1
 800b3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3a6:	4b22      	ldr	r3, [pc, #136]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b3b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	481b      	ldr	r0, [pc, #108]	; (800b434 <HAL_HCD_MspInit+0xc0>)
 800b3c8:	f7f5 fec4 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b3cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b3d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3de:	230a      	movs	r3, #10
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4812      	ldr	r0, [pc, #72]	; (800b434 <HAL_HCD_MspInit+0xc0>)
 800b3ea:	f7f5 feb3 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f8:	6353      	str	r3, [r2, #52]	; 0x34
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	4a0b      	ldr	r2, [pc, #44]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b408:	6453      	str	r3, [r2, #68]	; 0x44
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <HAL_HCD_MspInit+0xbc>)
 800b40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b416:	2200      	movs	r2, #0
 800b418:	2105      	movs	r1, #5
 800b41a:	2043      	movs	r0, #67	; 0x43
 800b41c:	f7f5 fe70 	bl	8001100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b420:	2043      	movs	r0, #67	; 0x43
 800b422:	f7f5 fe89 	bl	8001138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b426:	bf00      	nop
 800b428:	3728      	adds	r7, #40	; 0x28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	40023800 	.word	0x40023800
 800b434:	40020000 	.word	0x40020000

0800b438 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b446:	4618      	mov	r0, r3
 800b448:	f7fc fb9d 	bl	8007b86 <USBH_LL_IncTimer>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b462:	4618      	mov	r0, r3
 800b464:	f7fc fbe1 	bl	8007c2a <USBH_LL_Connect>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fc fbf6 	bl	8007c70 <USBH_LL_Disconnect>
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
 800b498:	4613      	mov	r3, r2
 800b49a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fc fc2b 	bl	8007cfe <USBH_LL_NotifyURBChange>
#endif
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fc fb8b 	bl	8007bda <USBH_LL_PortEnabled>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fc fb97 	bl	8007c0e <USBH_LL_PortDisabled>
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d12a      	bne.n	800b550 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4fa:	4a18      	ldr	r2, [pc, #96]	; (800b55c <USBH_LL_Init+0x74>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a15      	ldr	r2, [pc, #84]	; (800b55c <USBH_LL_Init+0x74>)
 800b506:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b50a:	4b14      	ldr	r3, [pc, #80]	; (800b55c <USBH_LL_Init+0x74>)
 800b50c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b510:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <USBH_LL_Init+0x74>)
 800b514:	2208      	movs	r2, #8
 800b516:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b518:	4b10      	ldr	r3, [pc, #64]	; (800b55c <USBH_LL_Init+0x74>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <USBH_LL_Init+0x74>)
 800b520:	2200      	movs	r2, #0
 800b522:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b524:	4b0d      	ldr	r3, [pc, #52]	; (800b55c <USBH_LL_Init+0x74>)
 800b526:	2202      	movs	r2, #2
 800b528:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b52a:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <USBH_LL_Init+0x74>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b530:	480a      	ldr	r0, [pc, #40]	; (800b55c <USBH_LL_Init+0x74>)
 800b532:	f7f5 ffc4 	bl	80014be <HAL_HCD_Init>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b53c:	f7f5 fa46 	bl	80009cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b540:	4806      	ldr	r0, [pc, #24]	; (800b55c <USBH_LL_Init+0x74>)
 800b542:	f7f6 fc25 	bl	8001d90 <HAL_HCD_GetCurrentFrame>
 800b546:	4603      	mov	r3, r0
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7fc fb0c 	bl	8007b68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20004608 	.word	0x20004608

0800b560 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b576:	4618      	mov	r0, r3
 800b578:	f7f6 fb92 	bl	8001ca0 <HAL_HCD_Start>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f95e 	bl	800b844 <USBH_Get_USB_Status>
 800b588:	4603      	mov	r3, r0
 800b58a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f6 fb9a 	bl	8001ce6 <HAL_HCD_Stop>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f943 	bl	800b844 <USBH_Get_USB_Status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f6 fbe4 	bl	8001dac <HAL_HCD_GetCurrentSpeed>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d00c      	beq.n	800b604 <USBH_LL_GetSpeed+0x38>
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d80d      	bhi.n	800b60a <USBH_LL_GetSpeed+0x3e>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <USBH_LL_GetSpeed+0x2c>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d003      	beq.n	800b5fe <USBH_LL_GetSpeed+0x32>
 800b5f6:	e008      	b.n	800b60a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5fc:	e008      	b.n	800b610 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5fe:	2301      	movs	r3, #1
 800b600:	73fb      	strb	r3, [r7, #15]
    break;
 800b602:	e005      	b.n	800b610 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b604:	2302      	movs	r3, #2
 800b606:	73fb      	strb	r3, [r7, #15]
    break;
 800b608:	e002      	b.n	800b610 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b60a:	2301      	movs	r3, #1
 800b60c:	73fb      	strb	r3, [r7, #15]
    break;
 800b60e:	bf00      	nop
  }
  return  speed;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b630:	4618      	mov	r0, r3
 800b632:	f7f6 fb75 	bl	8001d20 <HAL_HCD_ResetPort>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f901 	bl	800b844 <USBH_Get_USB_Status>
 800b642:	4603      	mov	r3, r0
 800b644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b646:	7bbb      	ldrb	r3, [r7, #14]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7f6 fb7d 	bl	8001d66 <HAL_HCD_HC_GetXferCount>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b676:	b590      	push	{r4, r7, lr}
 800b678:	b089      	sub	sp, #36	; 0x24
 800b67a:	af04      	add	r7, sp, #16
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	461a      	mov	r2, r3
 800b684:	4603      	mov	r3, r0
 800b686:	70fb      	strb	r3, [r7, #3]
 800b688:	460b      	mov	r3, r1
 800b68a:	70bb      	strb	r3, [r7, #2]
 800b68c:	4613      	mov	r3, r2
 800b68e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b69e:	787c      	ldrb	r4, [r7, #1]
 800b6a0:	78ba      	ldrb	r2, [r7, #2]
 800b6a2:	78f9      	ldrb	r1, [r7, #3]
 800b6a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6a6:	9302      	str	r3, [sp, #8]
 800b6a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	f7f5 ff69 	bl	800158c <HAL_HCD_HC_Init>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f8bf 	bl	800b844 <USBH_Get_USB_Status>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd90      	pop	{r4, r7, pc}

0800b6d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ee:	78fa      	ldrb	r2, [r7, #3]
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7f6 f802 	bl	80016fc <HAL_HCD_HC_Halt>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f8a0 	bl	800b844 <USBH_Get_USB_Status>
 800b704:	4603      	mov	r3, r0
 800b706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b708:	7bbb      	ldrb	r3, [r7, #14]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b712:	b590      	push	{r4, r7, lr}
 800b714:	b089      	sub	sp, #36	; 0x24
 800b716:	af04      	add	r7, sp, #16
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	4608      	mov	r0, r1
 800b71c:	4611      	mov	r1, r2
 800b71e:	461a      	mov	r2, r3
 800b720:	4603      	mov	r3, r0
 800b722:	70fb      	strb	r3, [r7, #3]
 800b724:	460b      	mov	r3, r1
 800b726:	70bb      	strb	r3, [r7, #2]
 800b728:	4613      	mov	r3, r2
 800b72a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b73a:	787c      	ldrb	r4, [r7, #1]
 800b73c:	78ba      	ldrb	r2, [r7, #2]
 800b73e:	78f9      	ldrb	r1, [r7, #3]
 800b740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4623      	mov	r3, r4
 800b756:	f7f5 fff5 	bl	8001744 <HAL_HCD_HC_SubmitRequest>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f86f 	bl	800b844 <USBH_Get_USB_Status>
 800b766:	4603      	mov	r3, r0
 800b768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}

0800b774 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f6 fad6 	bl	8001d3c <HAL_HCD_HC_GetURBState>
 800b790:	4603      	mov	r3, r0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d103      	bne.n	800b7b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f872 	bl	800b89c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b7b8:	20c8      	movs	r0, #200	; 0xc8
 800b7ba:	f7f5 fbc5 	bl	8000f48 <HAL_Delay>
  return USBH_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7e0:	78fa      	ldrb	r2, [r7, #3]
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	011b      	lsls	r3, r3, #4
 800b7e8:	1a9b      	subs	r3, r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3317      	adds	r3, #23
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7f6:	78fa      	ldrb	r2, [r7, #3]
 800b7f8:	68f9      	ldr	r1, [r7, #12]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	011b      	lsls	r3, r3, #4
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	333c      	adds	r3, #60	; 0x3c
 800b806:	78ba      	ldrb	r2, [r7, #2]
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e009      	b.n	800b820 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b80c:	78fa      	ldrb	r2, [r7, #3]
 800b80e:	68f9      	ldr	r1, [r7, #12]
 800b810:	4613      	mov	r3, r2
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	440b      	add	r3, r1
 800b81a:	333d      	adds	r3, #61	; 0x3d
 800b81c:	78ba      	ldrb	r2, [r7, #2]
 800b81e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7f5 fb86 	bl	8000f48 <HAL_Delay>
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	2b03      	cmp	r3, #3
 800b856:	d817      	bhi.n	800b888 <USBH_Get_USB_Status+0x44>
 800b858:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <USBH_Get_USB_Status+0x1c>)
 800b85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85e:	bf00      	nop
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b877 	.word	0x0800b877
 800b868:	0800b87d 	.word	0x0800b87d
 800b86c:	0800b883 	.word	0x0800b883
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
    break;
 800b874:	e00b      	b.n	800b88e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b876:	2302      	movs	r3, #2
 800b878:	73fb      	strb	r3, [r7, #15]
    break;
 800b87a:	e008      	b.n	800b88e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b87c:	2301      	movs	r3, #1
 800b87e:	73fb      	strb	r3, [r7, #15]
    break;
 800b880:	e005      	b.n	800b88e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b882:	2302      	movs	r3, #2
 800b884:	73fb      	strb	r3, [r7, #15]
    break;
 800b886:	e002      	b.n	800b88e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b888:	2302      	movs	r3, #2
 800b88a:	73fb      	strb	r3, [r7, #15]
    break;
 800b88c:	bf00      	nop
  }
  return usb_status;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]
 800b8b4:	e001      	b.n	800b8ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4803      	ldr	r0, [pc, #12]	; (800b8d0 <MX_DriverVbusFS+0x34>)
 800b8c2:	f7f5 fde3 	bl	800148c <HAL_GPIO_WritePin>
}
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40020800 	.word	0x40020800

0800b8d4 <malloc>:
 800b8d4:	4b02      	ldr	r3, [pc, #8]	; (800b8e0 <malloc+0xc>)
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	f000 b82b 	b.w	800b934 <_malloc_r>
 800b8de:	bf00      	nop
 800b8e0:	2000007c 	.word	0x2000007c

0800b8e4 <free>:
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <free+0xc>)
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	f000 b957 	b.w	800bb9c <_free_r>
 800b8ee:	bf00      	nop
 800b8f0:	2000007c 	.word	0x2000007c

0800b8f4 <sbrk_aligned>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	4e0e      	ldr	r6, [pc, #56]	; (800b930 <sbrk_aligned+0x3c>)
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	6831      	ldr	r1, [r6, #0]
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	b911      	cbnz	r1, 800b906 <sbrk_aligned+0x12>
 800b900:	f000 f902 	bl	800bb08 <_sbrk_r>
 800b904:	6030      	str	r0, [r6, #0]
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 f8fd 	bl	800bb08 <_sbrk_r>
 800b90e:	1c43      	adds	r3, r0, #1
 800b910:	d00a      	beq.n	800b928 <sbrk_aligned+0x34>
 800b912:	1cc4      	adds	r4, r0, #3
 800b914:	f024 0403 	bic.w	r4, r4, #3
 800b918:	42a0      	cmp	r0, r4
 800b91a:	d007      	beq.n	800b92c <sbrk_aligned+0x38>
 800b91c:	1a21      	subs	r1, r4, r0
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 f8f2 	bl	800bb08 <_sbrk_r>
 800b924:	3001      	adds	r0, #1
 800b926:	d101      	bne.n	800b92c <sbrk_aligned+0x38>
 800b928:	f04f 34ff 	mov.w	r4, #4294967295
 800b92c:	4620      	mov	r0, r4
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	200049ec 	.word	0x200049ec

0800b934 <_malloc_r>:
 800b934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b938:	1ccd      	adds	r5, r1, #3
 800b93a:	f025 0503 	bic.w	r5, r5, #3
 800b93e:	3508      	adds	r5, #8
 800b940:	2d0c      	cmp	r5, #12
 800b942:	bf38      	it	cc
 800b944:	250c      	movcc	r5, #12
 800b946:	2d00      	cmp	r5, #0
 800b948:	4607      	mov	r7, r0
 800b94a:	db01      	blt.n	800b950 <_malloc_r+0x1c>
 800b94c:	42a9      	cmp	r1, r5
 800b94e:	d905      	bls.n	800b95c <_malloc_r+0x28>
 800b950:	230c      	movs	r3, #12
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	2600      	movs	r6, #0
 800b956:	4630      	mov	r0, r6
 800b958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba30 <_malloc_r+0xfc>
 800b960:	f000 f868 	bl	800ba34 <__malloc_lock>
 800b964:	f8d8 3000 	ldr.w	r3, [r8]
 800b968:	461c      	mov	r4, r3
 800b96a:	bb5c      	cbnz	r4, 800b9c4 <_malloc_r+0x90>
 800b96c:	4629      	mov	r1, r5
 800b96e:	4638      	mov	r0, r7
 800b970:	f7ff ffc0 	bl	800b8f4 <sbrk_aligned>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	4604      	mov	r4, r0
 800b978:	d155      	bne.n	800ba26 <_malloc_r+0xf2>
 800b97a:	f8d8 4000 	ldr.w	r4, [r8]
 800b97e:	4626      	mov	r6, r4
 800b980:	2e00      	cmp	r6, #0
 800b982:	d145      	bne.n	800ba10 <_malloc_r+0xdc>
 800b984:	2c00      	cmp	r4, #0
 800b986:	d048      	beq.n	800ba1a <_malloc_r+0xe6>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	4631      	mov	r1, r6
 800b98c:	4638      	mov	r0, r7
 800b98e:	eb04 0903 	add.w	r9, r4, r3
 800b992:	f000 f8b9 	bl	800bb08 <_sbrk_r>
 800b996:	4581      	cmp	r9, r0
 800b998:	d13f      	bne.n	800ba1a <_malloc_r+0xe6>
 800b99a:	6821      	ldr	r1, [r4, #0]
 800b99c:	1a6d      	subs	r5, r5, r1
 800b99e:	4629      	mov	r1, r5
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7ff ffa7 	bl	800b8f4 <sbrk_aligned>
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	d037      	beq.n	800ba1a <_malloc_r+0xe6>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	442b      	add	r3, r5
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d038      	beq.n	800ba2a <_malloc_r+0xf6>
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	42a2      	cmp	r2, r4
 800b9bc:	d12b      	bne.n	800ba16 <_malloc_r+0xe2>
 800b9be:	2200      	movs	r2, #0
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	e00f      	b.n	800b9e4 <_malloc_r+0xb0>
 800b9c4:	6822      	ldr	r2, [r4, #0]
 800b9c6:	1b52      	subs	r2, r2, r5
 800b9c8:	d41f      	bmi.n	800ba0a <_malloc_r+0xd6>
 800b9ca:	2a0b      	cmp	r2, #11
 800b9cc:	d917      	bls.n	800b9fe <_malloc_r+0xca>
 800b9ce:	1961      	adds	r1, r4, r5
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	6025      	str	r5, [r4, #0]
 800b9d4:	bf18      	it	ne
 800b9d6:	6059      	strne	r1, [r3, #4]
 800b9d8:	6863      	ldr	r3, [r4, #4]
 800b9da:	bf08      	it	eq
 800b9dc:	f8c8 1000 	streq.w	r1, [r8]
 800b9e0:	5162      	str	r2, [r4, r5]
 800b9e2:	604b      	str	r3, [r1, #4]
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f104 060b 	add.w	r6, r4, #11
 800b9ea:	f000 f829 	bl	800ba40 <__malloc_unlock>
 800b9ee:	f026 0607 	bic.w	r6, r6, #7
 800b9f2:	1d23      	adds	r3, r4, #4
 800b9f4:	1af2      	subs	r2, r6, r3
 800b9f6:	d0ae      	beq.n	800b956 <_malloc_r+0x22>
 800b9f8:	1b9b      	subs	r3, r3, r6
 800b9fa:	50a3      	str	r3, [r4, r2]
 800b9fc:	e7ab      	b.n	800b956 <_malloc_r+0x22>
 800b9fe:	42a3      	cmp	r3, r4
 800ba00:	6862      	ldr	r2, [r4, #4]
 800ba02:	d1dd      	bne.n	800b9c0 <_malloc_r+0x8c>
 800ba04:	f8c8 2000 	str.w	r2, [r8]
 800ba08:	e7ec      	b.n	800b9e4 <_malloc_r+0xb0>
 800ba0a:	4623      	mov	r3, r4
 800ba0c:	6864      	ldr	r4, [r4, #4]
 800ba0e:	e7ac      	b.n	800b96a <_malloc_r+0x36>
 800ba10:	4634      	mov	r4, r6
 800ba12:	6876      	ldr	r6, [r6, #4]
 800ba14:	e7b4      	b.n	800b980 <_malloc_r+0x4c>
 800ba16:	4613      	mov	r3, r2
 800ba18:	e7cc      	b.n	800b9b4 <_malloc_r+0x80>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	603b      	str	r3, [r7, #0]
 800ba1e:	4638      	mov	r0, r7
 800ba20:	f000 f80e 	bl	800ba40 <__malloc_unlock>
 800ba24:	e797      	b.n	800b956 <_malloc_r+0x22>
 800ba26:	6025      	str	r5, [r4, #0]
 800ba28:	e7dc      	b.n	800b9e4 <_malloc_r+0xb0>
 800ba2a:	605b      	str	r3, [r3, #4]
 800ba2c:	deff      	udf	#255	; 0xff
 800ba2e:	bf00      	nop
 800ba30:	200049e8 	.word	0x200049e8

0800ba34 <__malloc_lock>:
 800ba34:	4801      	ldr	r0, [pc, #4]	; (800ba3c <__malloc_lock+0x8>)
 800ba36:	f000 b8a1 	b.w	800bb7c <__retarget_lock_acquire_recursive>
 800ba3a:	bf00      	nop
 800ba3c:	20004b2c 	.word	0x20004b2c

0800ba40 <__malloc_unlock>:
 800ba40:	4801      	ldr	r0, [pc, #4]	; (800ba48 <__malloc_unlock+0x8>)
 800ba42:	f000 b89c 	b.w	800bb7e <__retarget_lock_release_recursive>
 800ba46:	bf00      	nop
 800ba48:	20004b2c 	.word	0x20004b2c

0800ba4c <memset>:
 800ba4c:	4402      	add	r2, r0
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d100      	bne.n	800ba56 <memset+0xa>
 800ba54:	4770      	bx	lr
 800ba56:	f803 1b01 	strb.w	r1, [r3], #1
 800ba5a:	e7f9      	b.n	800ba50 <memset+0x4>

0800ba5c <_reclaim_reent>:
 800ba5c:	4b29      	ldr	r3, [pc, #164]	; (800bb04 <_reclaim_reent+0xa8>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4283      	cmp	r3, r0
 800ba62:	b570      	push	{r4, r5, r6, lr}
 800ba64:	4604      	mov	r4, r0
 800ba66:	d04b      	beq.n	800bb00 <_reclaim_reent+0xa4>
 800ba68:	69c3      	ldr	r3, [r0, #28]
 800ba6a:	b143      	cbz	r3, 800ba7e <_reclaim_reent+0x22>
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d144      	bne.n	800bafc <_reclaim_reent+0xa0>
 800ba72:	69e3      	ldr	r3, [r4, #28]
 800ba74:	6819      	ldr	r1, [r3, #0]
 800ba76:	b111      	cbz	r1, 800ba7e <_reclaim_reent+0x22>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f88f 	bl	800bb9c <_free_r>
 800ba7e:	6961      	ldr	r1, [r4, #20]
 800ba80:	b111      	cbz	r1, 800ba88 <_reclaim_reent+0x2c>
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 f88a 	bl	800bb9c <_free_r>
 800ba88:	69e1      	ldr	r1, [r4, #28]
 800ba8a:	b111      	cbz	r1, 800ba92 <_reclaim_reent+0x36>
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 f885 	bl	800bb9c <_free_r>
 800ba92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ba94:	b111      	cbz	r1, 800ba9c <_reclaim_reent+0x40>
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f880 	bl	800bb9c <_free_r>
 800ba9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba9e:	b111      	cbz	r1, 800baa6 <_reclaim_reent+0x4a>
 800baa0:	4620      	mov	r0, r4
 800baa2:	f000 f87b 	bl	800bb9c <_free_r>
 800baa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800baa8:	b111      	cbz	r1, 800bab0 <_reclaim_reent+0x54>
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 f876 	bl	800bb9c <_free_r>
 800bab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bab2:	b111      	cbz	r1, 800baba <_reclaim_reent+0x5e>
 800bab4:	4620      	mov	r0, r4
 800bab6:	f000 f871 	bl	800bb9c <_free_r>
 800baba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800babc:	b111      	cbz	r1, 800bac4 <_reclaim_reent+0x68>
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f86c 	bl	800bb9c <_free_r>
 800bac4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bac6:	b111      	cbz	r1, 800bace <_reclaim_reent+0x72>
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 f867 	bl	800bb9c <_free_r>
 800bace:	6a23      	ldr	r3, [r4, #32]
 800bad0:	b1b3      	cbz	r3, 800bb00 <_reclaim_reent+0xa4>
 800bad2:	4620      	mov	r0, r4
 800bad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bad8:	4718      	bx	r3
 800bada:	5949      	ldr	r1, [r1, r5]
 800badc:	b941      	cbnz	r1, 800baf0 <_reclaim_reent+0x94>
 800bade:	3504      	adds	r5, #4
 800bae0:	69e3      	ldr	r3, [r4, #28]
 800bae2:	2d80      	cmp	r5, #128	; 0x80
 800bae4:	68d9      	ldr	r1, [r3, #12]
 800bae6:	d1f8      	bne.n	800bada <_reclaim_reent+0x7e>
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 f857 	bl	800bb9c <_free_r>
 800baee:	e7c0      	b.n	800ba72 <_reclaim_reent+0x16>
 800baf0:	680e      	ldr	r6, [r1, #0]
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 f852 	bl	800bb9c <_free_r>
 800baf8:	4631      	mov	r1, r6
 800bafa:	e7ef      	b.n	800badc <_reclaim_reent+0x80>
 800bafc:	2500      	movs	r5, #0
 800bafe:	e7ef      	b.n	800bae0 <_reclaim_reent+0x84>
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	bf00      	nop
 800bb04:	2000007c 	.word	0x2000007c

0800bb08 <_sbrk_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d06      	ldr	r5, [pc, #24]	; (800bb24 <_sbrk_r+0x1c>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	602b      	str	r3, [r5, #0]
 800bb14:	f7f5 f964 	bl	8000de0 <_sbrk>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_sbrk_r+0x1a>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_sbrk_r+0x1a>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20004b28 	.word	0x20004b28

0800bb28 <__errno>:
 800bb28:	4b01      	ldr	r3, [pc, #4]	; (800bb30 <__errno+0x8>)
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	2000007c 	.word	0x2000007c

0800bb34 <__libc_init_array>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	4d0d      	ldr	r5, [pc, #52]	; (800bb6c <__libc_init_array+0x38>)
 800bb38:	4c0d      	ldr	r4, [pc, #52]	; (800bb70 <__libc_init_array+0x3c>)
 800bb3a:	1b64      	subs	r4, r4, r5
 800bb3c:	10a4      	asrs	r4, r4, #2
 800bb3e:	2600      	movs	r6, #0
 800bb40:	42a6      	cmp	r6, r4
 800bb42:	d109      	bne.n	800bb58 <__libc_init_array+0x24>
 800bb44:	4d0b      	ldr	r5, [pc, #44]	; (800bb74 <__libc_init_array+0x40>)
 800bb46:	4c0c      	ldr	r4, [pc, #48]	; (800bb78 <__libc_init_array+0x44>)
 800bb48:	f000 f874 	bl	800bc34 <_init>
 800bb4c:	1b64      	subs	r4, r4, r5
 800bb4e:	10a4      	asrs	r4, r4, #2
 800bb50:	2600      	movs	r6, #0
 800bb52:	42a6      	cmp	r6, r4
 800bb54:	d105      	bne.n	800bb62 <__libc_init_array+0x2e>
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5c:	4798      	blx	r3
 800bb5e:	3601      	adds	r6, #1
 800bb60:	e7ee      	b.n	800bb40 <__libc_init_array+0xc>
 800bb62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb66:	4798      	blx	r3
 800bb68:	3601      	adds	r6, #1
 800bb6a:	e7f2      	b.n	800bb52 <__libc_init_array+0x1e>
 800bb6c:	0800bcd8 	.word	0x0800bcd8
 800bb70:	0800bcd8 	.word	0x0800bcd8
 800bb74:	0800bcd8 	.word	0x0800bcd8
 800bb78:	0800bcdc 	.word	0x0800bcdc

0800bb7c <__retarget_lock_acquire_recursive>:
 800bb7c:	4770      	bx	lr

0800bb7e <__retarget_lock_release_recursive>:
 800bb7e:	4770      	bx	lr

0800bb80 <memcpy>:
 800bb80:	440a      	add	r2, r1
 800bb82:	4291      	cmp	r1, r2
 800bb84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb88:	d100      	bne.n	800bb8c <memcpy+0xc>
 800bb8a:	4770      	bx	lr
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb96:	4291      	cmp	r1, r2
 800bb98:	d1f9      	bne.n	800bb8e <memcpy+0xe>
 800bb9a:	bd10      	pop	{r4, pc}

0800bb9c <_free_r>:
 800bb9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	d044      	beq.n	800bc2c <_free_r+0x90>
 800bba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba6:	9001      	str	r0, [sp, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f1a1 0404 	sub.w	r4, r1, #4
 800bbae:	bfb8      	it	lt
 800bbb0:	18e4      	addlt	r4, r4, r3
 800bbb2:	f7ff ff3f 	bl	800ba34 <__malloc_lock>
 800bbb6:	4a1e      	ldr	r2, [pc, #120]	; (800bc30 <_free_r+0x94>)
 800bbb8:	9801      	ldr	r0, [sp, #4]
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	b933      	cbnz	r3, 800bbcc <_free_r+0x30>
 800bbbe:	6063      	str	r3, [r4, #4]
 800bbc0:	6014      	str	r4, [r2, #0]
 800bbc2:	b003      	add	sp, #12
 800bbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbc8:	f7ff bf3a 	b.w	800ba40 <__malloc_unlock>
 800bbcc:	42a3      	cmp	r3, r4
 800bbce:	d908      	bls.n	800bbe2 <_free_r+0x46>
 800bbd0:	6825      	ldr	r5, [r4, #0]
 800bbd2:	1961      	adds	r1, r4, r5
 800bbd4:	428b      	cmp	r3, r1
 800bbd6:	bf01      	itttt	eq
 800bbd8:	6819      	ldreq	r1, [r3, #0]
 800bbda:	685b      	ldreq	r3, [r3, #4]
 800bbdc:	1949      	addeq	r1, r1, r5
 800bbde:	6021      	streq	r1, [r4, #0]
 800bbe0:	e7ed      	b.n	800bbbe <_free_r+0x22>
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	b10b      	cbz	r3, 800bbec <_free_r+0x50>
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	d9fa      	bls.n	800bbe2 <_free_r+0x46>
 800bbec:	6811      	ldr	r1, [r2, #0]
 800bbee:	1855      	adds	r5, r2, r1
 800bbf0:	42a5      	cmp	r5, r4
 800bbf2:	d10b      	bne.n	800bc0c <_free_r+0x70>
 800bbf4:	6824      	ldr	r4, [r4, #0]
 800bbf6:	4421      	add	r1, r4
 800bbf8:	1854      	adds	r4, r2, r1
 800bbfa:	42a3      	cmp	r3, r4
 800bbfc:	6011      	str	r1, [r2, #0]
 800bbfe:	d1e0      	bne.n	800bbc2 <_free_r+0x26>
 800bc00:	681c      	ldr	r4, [r3, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	6053      	str	r3, [r2, #4]
 800bc06:	440c      	add	r4, r1
 800bc08:	6014      	str	r4, [r2, #0]
 800bc0a:	e7da      	b.n	800bbc2 <_free_r+0x26>
 800bc0c:	d902      	bls.n	800bc14 <_free_r+0x78>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	6003      	str	r3, [r0, #0]
 800bc12:	e7d6      	b.n	800bbc2 <_free_r+0x26>
 800bc14:	6825      	ldr	r5, [r4, #0]
 800bc16:	1961      	adds	r1, r4, r5
 800bc18:	428b      	cmp	r3, r1
 800bc1a:	bf04      	itt	eq
 800bc1c:	6819      	ldreq	r1, [r3, #0]
 800bc1e:	685b      	ldreq	r3, [r3, #4]
 800bc20:	6063      	str	r3, [r4, #4]
 800bc22:	bf04      	itt	eq
 800bc24:	1949      	addeq	r1, r1, r5
 800bc26:	6021      	streq	r1, [r4, #0]
 800bc28:	6054      	str	r4, [r2, #4]
 800bc2a:	e7ca      	b.n	800bbc2 <_free_r+0x26>
 800bc2c:	b003      	add	sp, #12
 800bc2e:	bd30      	pop	{r4, r5, pc}
 800bc30:	200049e8 	.word	0x200049e8

0800bc34 <_init>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	bf00      	nop
 800bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	469e      	mov	lr, r3
 800bc3e:	4770      	bx	lr

0800bc40 <_fini>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	bf00      	nop
 800bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc46:	bc08      	pop	{r3}
 800bc48:	469e      	mov	lr, r3
 800bc4a:	4770      	bx	lr
